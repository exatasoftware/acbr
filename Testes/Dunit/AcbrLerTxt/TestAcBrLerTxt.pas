unit TestAcBrLerTxt;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}


{$I ACBr.inc}
interface

uses
  SysUtils, StrUtils, Classes,  Contnrs,
    {$ifdef FPC}
      fpcunit, testutils, testregistry, LConvEncoding,
  {$else}
    TestFramework,
  {$endif}
  AcbrLerTxtIni,
  pcnNFeRTXT,pcnConversaoNFe,pcnConversao,pcnNFe,pcnAuxiliar,ACBrValidador,
  ACBrUtil,pcnLayoutTXT;

type

 // Test methods for class TFactory

  TAcBrLerTxtTDD = class(TTestCase)
  strict private

  private
    NFeRTXT           : TNFeRTXT;
    ArqText           : TStringList;
    FConteudoArquivo  : TStringList;
    FRegistro         : String;
    fsComparar        : String;
    FNFe              : TNFe;
    FConfig           : TIniAcbrLerTxt;
    procedure LerArquivo;
    procedure    Monta( TAG: variant; const Tipo: TpcnTipoCampo = tcStr );
    procedure MontaDec( TAG: double; dDecimal : Integer = 0 );
    Function  RetornaConteudo( s  : String;sBase : String = ''; iDD : Integer = 0  ) : String;
    procedure SetsComparar(const Value: String);
    function  LerCampo(const Tipo: TpcnTipoCampo; TAG: variant): variant;
    function  iPosicao(s: String;iPosi : Integer = 0  ): Integer;
    function  MontaISaber(sMonta: STring; pfiItem: Integer): Integer;
    function  RetornaConteudoPos( s  : String;iDD : Integer = 0  ) : String;
    Procedure Initialize( sMonta : STring );
    procedure Finalize( sFinalize : String = '') ;
    procedure MontaZeroEsquerda(TAG, iZeros: Integer);
    function  MontaISaberString(sMonta: STring;iPosi : Integer ): Integer;
    procedure MontaHora(TAG: Variant);
    function MontaLista(s: String): TStringList;
    function ListaComparar(sLista, sListaCompara: String): Boolean;
    procedure MontaDataHora(TAG: Variant; iCodigoParaUF: Integer);
  public
    procedure SetUp; override;
    procedure TearDown; override;

  published
    property NFe        : TNFe            read FNFe       write FNFe;
    property Registro   : String          read FRegistro  write FRegistro;
    property sComparar  : String          read fsComparar write SetsComparar;
    property Config     : TIniAcbrLerTxt  Read FConfig    write FConfig;
    Procedure NomeDoArquivo;
    Procedure LerTxt;
    procedure ChecarItensLayoutVersao310;
    procedure ChecarLayoutVersao310;
    procedure IdB;
    procedure IdBA02;
    procedure IdBA03;
    procedure IdBA10;
    procedure IdBA13;
    procedure IdBA14;
    procedure IdBA19;
    procedure IdBA20;
    procedure IdC;
    procedure IdC02;
    procedure IdC02A;
    procedure IdC05;
    procedure IdD;
    procedure IdE;
    procedure IdE02;
    procedure IdE03;
    procedure IdE03A;
    procedure IdE05;
    procedure IdF;
    procedure IdF02;
    procedure IdF02A;
    procedure IdG;
    procedure IdG02;
    procedure IdG02A;
    procedure IdGA02;
    procedure IdGA03;
    procedure IdH;
    procedure IdI;
    procedure IdI05a;
    procedure IdI05c;
    procedure IdI18;
    procedure IdI25;
    procedure IdI50;
    procedure IdI52;
    procedure IdJ;
    procedure IdK;
    procedure IdL;
    procedure IdLA;
    procedure IdLA07;
    procedure IdLB;
    procedure IdL109;
    procedure IdL114;
    procedure IdL117;
    procedure IdM;
    procedure IdN02;
    procedure IdN03;
    procedure IdN04;
    procedure IdN05;
    procedure IdN06;
    procedure IdN07;
    procedure IdN08;
    procedure IdN09;
    procedure IdN10;
    procedure IdN10A;
    procedure IdN10B;
    procedure IdN10C;
    procedure IdN10D;
    procedure idN10E;
    procedure IdN10F;
    procedure IdN10G;
    procedure IdN10H;
    procedure IdO;
    procedure IdO07;
    procedure IdO08;
    procedure IdO10;
    procedure IdO11;
    procedure IdP;
    procedure IdQ02;
    procedure IdQ03;
    procedure IdQ04;
    procedure IdQ05;
    procedure IdQ07;
    procedure IdQ10;
    procedure IdR;
    procedure IdR02;
    procedure IdR04;
    procedure IdS02;
    procedure IdS03;
    procedure IdS04;
    procedure IdS05;
    procedure IdS07;
    procedure IdS09;
    procedure IdT;
    procedure IdT02;
    procedure IdT04;
    procedure idNA;
    procedure IdU;
    procedure IdUA;
    procedure IdW02;
    procedure IdW04c;
    procedure IdW04e;
    procedure IdW04g;
    procedure IdW17;
    procedure IdW23;
    procedure IdX;
    procedure IdX03;
    procedure IdX04;
    procedure IdX05;
    procedure IdX11;
    procedure IdX18;
    procedure IdX26;
    procedure IdX33;
    procedure IdYA;
    procedure IdYA04a;
    procedure IdY02;
    procedure IdY07;
    procedure IdZ;
    procedure IdZ10;
    procedure IdZA;
    procedure IdZB;
    procedure IdZC;
    procedure IdZC04;
    procedure IdZC10;
  end;

implementation

//type
  // I'm committing a horrid sin here I know. I'm using an exception
  // as a communications mechanism between my report and my testcase.
  // However, I sleep at night by telling myself it's a) convenient and
  // b) not actually part of the Factory or a real app, just my test code.

{ TAcBrLerTxtTDD }

procedure TAcBrLerTxtTDD.NomeDoArquivo;
begin
  CheckNotEquals(ArqText[0],' ');
end;

procedure TAcBrLerTxtTDD.SetsComparar(const Value: String);
begin
  fsComparar := Value;
end;

procedure TAcBrLerTxtTDD.SetUp;
begin
  inherited;
  LerArquivo;
  Config      := TIniAcbrLerTxt.Create;
  NFe         := TNFe.Create;
  NFeRTXT     := TNFeRTXT.Create( NFe );
  NFeRTXT.CarregarArquivo(ArqText[0]);
  NFeRTXT.LerTxt;
  FConteudoArquivo  := NFeRTXT.ConteudoArquivo;
  NFe               := NFeRTXT.NFe;
end;

procedure TAcBrLerTxtTDD.TearDown;
begin
  inherited;
  Config.Free;
  NFeRTXT.Free;
  ArqText.Free;
  NFe.Free;
end;

procedure TAcBrLerTxtTDD.LerArquivo;
begin
  ArqText     := TStringList.Create;
  FindFiles( '..\AcbrLerTxt\Texto\*.txt', ArqText,True);
end;

procedure TAcBrLerTxtTDD.LerTxt;
begin
  with NFe do
  begin
    CheckEquals(infNFe.ID,Config.Strid);
    CheckEquals(TpAmbToStr(procNFe.tpAmb),Config.StrtpAmb,'procNFe.tpAmb');
    CheckEquals(procNFe.verAplic,'');
    CheckEquals(procNFe.chNFe,'','procNFe.chNFe');
    CheckEquals(DateTimeToStr(procNFe.dhRecbto),'30/12/1899','procNFe.dhRecbto ');
    CheckEquals(procNFe.nProt,'','procNFe.nProt ');
    CheckEquals(procNFe.digVal,'','procNFe.digVal' );
    CheckEquals(IntToStr(procNFe.cStat),'0','procNFe.cStat ');
    CheckEquals(procNFe.xMotivo,'','procNFe.xMotivo ');
  end;
end;

procedure TAcBrLerTxtTDD.IdC;
begin
  Initialize('C');
  (*C   *)Monta( NFe.Emit.xNome );
  (*C   *)Monta( NFe.Emit.xFant );
  (*C17 *)Monta( NFe.Emit.IE    );
  (*C18 *)Monta( NFe.Emit.IEST  );
  (*C19 *)Monta( NFe.Emit.IM    );
  (*C20 *)Monta( NFe.Emit.CNAE  );
  (*C21 *)Monta( CRTToStr( NFe.Emit.CRT ));
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdC02;
begin
  Initialize('C02');
  (*C02 *)Monta(NFe.Emit.CNPJCPF );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdC02A;
begin
  Initialize('C02a');
  (*C02A*)Monta(NFe.Emit.CNPJCPF );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;


procedure TAcBrLerTxtTDD.IdC05;
begin
  Initialize('C05');
  (*C06 *)Monta( NFe.Emit.enderEmit.xLgr  );
  (*C07 *)Monta( NFe.Emit.enderEmit.nro   );
  (*C08 *)Monta( NFe.Emit.enderEmit.xCpl  );
  (*C09 *)Monta( NFe.Emit.enderEmit.xBairro);
  (*C10 *)Monta( NFe.Emit.EnderEmit.cMun  , tcInt );
  (*C11 *)Monta( NFe.Emit.enderEmit.xMun  );
  (*C12 *)Monta( NFe.Emit.enderEmit.UF    );
  (*C13 *)MontaZeroEsquerda( NFe.Emit.enderEmit.CEP ,Config.IntCCEP);
  (*C14 *)Monta( NFe.Emit.enderEmit.cPais , tcInt );
  (*C15 *)Monta( NFe.Emit.enderEmit.xPais );
  (*C16 *)Monta( NFe.Emit.enderEmit.fone  );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;


procedure TAcBrLerTxtTDD.IdD;
begin
  Initialize('D');
  (*D02*)Monta( NFe.Avulsa.CNPJ     );
  (*D03*)Monta( NFe.Avulsa.xOrgao   );
  (*D04*)Monta( NFe.Avulsa.matr     );
  (*D05*)Monta( NFe.Avulsa.xAgente  );
  (*D06*)Monta( NFe.Avulsa.fone     );
  (*D07*)Monta( NFe.Avulsa.UF       );
  (*D08*)Monta( NFe.Avulsa.nDAR     );
  (*D09*)Monta( NFe.Avulsa.dEmi    , tcDat );
  (*D10*)Monta( NFe.Avulsa.vDAR    , tcDe2 );
  (*D11*)Monta( NFe.Avulsa.repEmi   );
  (*D12*)Monta( NFe.Avulsa.dPag    , tcDat );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdE;
begin
  Initialize('E');
  (*E04*)Monta( NFe.Dest.xNome     );
           if ( NFe.infNFe.Versao >= 3.10) then
         Monta( indIEDestToStr( NFe.Dest.indIEDest ));
  (*E17*)Monta( NFe.Dest.IE        );
  (*E18*)Monta( NFe.Dest.ISUF      );
           if ( NFe.infNFe.Versao >= 3.10) then
         Monta( NFe.Dest.IM        );
  (*E19*)Monta( NFe.Dest.Email     );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdE02;
begin
  Initialize('E02');
  (*E02*)Monta( NFe.Dest.CNPJCPF );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;
procedure TAcBrLerTxtTDD.IdE03;
begin
  Initialize('E03');
  (*E03*)Monta( NFe.Dest.CNPJCPF );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdE03A ;
begin
  Initialize('E03a');
  (*E03*)Monta( NFe.Dest.idEstrangeiro );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;


procedure TAcBrLerTxtTDD.IdE05;
begin
  Initialize('E05');
  (*E06*)Monta( NFe.Dest.enderDest.xLgr   );
  (*E07*)Monta( NFe.Dest.enderDest.nro    );
  (*E08*)Monta( NFe.Dest.enderDest.xCpl    );
  (*E09*)Monta( NFe.Dest.enderDest.xBairro );
  (*E10*)Monta( NFe.Dest.enderDest.cMun    , tcInt );
  (*E11*)Monta( NFe.Dest.enderDest.xMun    );
  (*E12*)Monta( NFe.Dest.enderDest.UF      );
  (*E13*)MontaZeroEsquerda( NFe.Dest.enderDest.CEP , Config.IntECEP );
  (*E14*)Monta( NFe.Dest.enderDest.cPais , tcInt );
  (*E15*)Monta( NFe.Dest.enderDest.xPais   );
  (*E16*)Monta( NFe.Dest.enderDest.fone    );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;


procedure TAcBrLerTxtTDD.IdF;
begin
  Initialize('F');
  (*F03*)Monta( NFe.Retirada.xLgr    );
  (*F04*)Monta( NFe.Retirada.nro     );
  (*F05*)Monta( NFe.Retirada.xCpl    );
  (*F06*)Monta( NFe.Retirada.xBairro );
  (*F07*)Monta( NFe.Retirada.cMun    , tcInt );
  (*F08*)Monta( NFe.Retirada.xMun    );
  (*F09*)Monta( NFe.Retirada.UF      );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdF02;
begin
  Initialize('F02');
  (*F02 *)Monta( NFe.Retirada.CNPJCPF );
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdF02A;
begin
  Initialize('F02A');
  (*F02a*)Monta( NFe.Retirada.CNPJCPF  );
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdG;
begin
  Initialize('G');
  (*G03*)Monta( NFe.Entrega.xLgr      );
  (*G04*)Monta( NFe.Entrega.nro       );
  (*G05*)Monta( NFe.Entrega.xCpl      );
  (*G06*)Monta( NFe.Entrega.xBairro   );
  (*G07*)Monta( NFe.Entrega.cMun      ,  tcInt );
  (*G08*)Monta( NFe.Entrega.xMun      );
  (*G09*)Monta( NFe.Entrega.UF        );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdG02;
begin
  Initialize('G02');
  (*G02*)Monta( NFe.Entrega.CNPJCPF   );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdG02A;
begin
  Initialize('G02A');
  (*G02a*)Monta( NFe.Entrega.CNPJCPF   );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;


procedure TAcBrLerTxtTDD.IdH;
begin
  Initialize('H');
  (*   *)Monta( NFe.Det[0].prod.nItem , tcInt );
  sComparar := Registro;
  (*V01*)Monta( NFe.Det[0].infAdProd );
  Finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdJ;
Var
  IBase , x : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('J');
    (*J02*)Monta( tpOPToStr( NFe.Det[x].Prod.veicProd.tpOP));
    (*J03*)Monta( NFe.Det[x].Prod.veicProd.chassi      );
    (*J04*)Monta( NFe.Det[x].Prod.veicProd.cCor        );
    (*J05*)Monta( NFe.Det[x].Prod.veicProd.xCor        );
    (*J06*)Monta( NFe.Det[x].Prod.veicProd.pot         );
    (*J07*)Monta( NFe.Det[x].Prod.veicProd.Cilin       );
    (*J08*)Monta( NFe.Det[x].Prod.veicProd.pesoL       );
    (*J09*)Monta( NFe.Det[x].Prod.veicProd.pesoB       );
    (*J10*)Monta( NFe.Det[x].Prod.veicProd.nSerie      );
    (*J11*)Monta( NFe.Det[x].Prod.veicProd.tpComb      );
    (*J12*)Monta( NFe.Det[x].Prod.veicProd.nMotor      );
    (*J13*)Monta( NFe.Det[x].Prod.veicProd.CMT         );
    (*J14*)Monta( NFe.Det[x].Prod.veicProd.dist        );
    (*J16*)Monta( NFe.Det[x].Prod.veicProd.anoMod      , tcInt);
    (*J17*)Monta( NFe.Det[x].Prod.veicProd.anoFab      , tcInt);
    (*J18*)Monta( NFe.Det[x].Prod.veicProd.tpPint      );
    (*J19*)Monta( NFe.Det[x].Prod.veicProd.tpVeic      , tcInt);
    (*J20*)Monta( NFe.Det[x].Prod.veicProd.espVeic     , tcInt);
    (*J21*)Monta( NFe.Det[x].Prod.veicProd.VIN         );
    (*J22*)Monta( condVeicToStr(NFe.Det[x].Prod.veicProd.condVeic ));
    (*J23*)Monta( NFe.Det[x].Prod.veicProd.cMod        );
    (*J24*)Monta( NFe.Det[x].Prod.veicProd.cCorDENATRAN);
    (*J25*)Monta( NFe.Det[x].Prod.veicProd.lota        , tcInt);
    (*J26*)Monta( NFe.Det[x].Prod.veicProd.tpRest      , tcInt);
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdK;
Var
  IBase , x, fJ : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    for fJ := 0 to NFe.Det[x].Prod.med.Count - 1 do
    begin
      Initialize('K');
      (*K02*)Monta( NFe.Det[x].Prod.med[fj].nLote );
      (*K03*)Monta( NFe.Det[x].Prod.med[fj].qLote , tcDe3);
      (*K04*)Monta( NFe.Det[x].Prod.med[fj].dFab  , tcDat);
      (*K05*)Monta( NFe.Det[x].Prod.med[fj].dVal  , tcDat);
      (*K06*)Monta( NFe.Det[x].Prod.med[fj].vPMC  , tcDe2);
      finalize;
      CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
    end;
  end;
end;

procedure TAcBrLerTxtTDD.IdL;
Var
  IBase , x, fJ : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    for fJ := 0 to NFe.Det[x].Prod.arma.count - 1 do
    begin
      Initialize('L');
      (*L02*)Monta( tpArmaToStr( NFe.Det[x].Prod.arma[fj].tpArma ));
      (*L03*)Monta( NFe.Det[x].Prod.arma[fj].nSerie , tcInt);
      (*L04*)Monta( NFe.Det[x].Prod.arma[fj].nCano  , tcInt);
      (*L05*)Monta( NFe.Det[x].Prod.arma[fj].descr  );
      finalize;
      CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
    end;
  end;
end;

procedure TAcBrLerTxtTDD.IdL109;
Var
  IBase ,  x: Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
     IBase := MontaISaber('H', x );
    Initialize('L109');
    (*L110*)Monta( NFe.Det[x].Prod.comb.ICMS.vBCICMS   , tcDe2);
    (*L111*)Monta( NFe.Det[x].Prod.comb.ICMS.vICMS     , tcDe2);
    (*L112*)Monta( NFe.Det[x].Prod.comb.ICMS.vBCICMSST , tcDe2);
    (*L113*)Monta( NFe.Det[x].Prod.comb.ICMS.vICMSST   , tcDe2);
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdL114;
Var
  IBase , x : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
     IBase := MontaISaber('H', x );
    Initialize('L114');
    (*L115*)Monta( NFe.Det[x].Prod.comb.ICMSInter.vBCICMSSTDest, tcDe2);
    (*L116*)Monta( NFe.Det[x].Prod.comb.ICMSInter.vICMSSTDest  , tcDe2);
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdL117;
Var
  IBase , x : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
     IBase := MontaISaber('H', x );
    Initialize('L117');
    (*L118*)Monta( NFe.Det[x].Prod.comb.ICMSCons.vBCICMSSTCons , tcDe2);
    (*L119*)Monta( NFe.Det[x].Prod.comb.ICMSCons.vICMSSTCons   , tcDe2);
    (*L120*)Monta( NFe.Det[x].Prod.comb.ICMSCons.UFcons        );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdLA;
Var
  IBase , x : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
     IBase := MontaISaber('H', x );
    Initialize('LA');
    (*L102*)Monta( NFe.Det[x].Prod.comb.cProdANP , tcInt);
            Monta( NFe.Det[x].Prod.comb.pMixGN   , tcDe4);
    (*L103*)Monta( NFe.Det[x].Prod.comb.CODIF    );
    (*L104*)Monta( NFe.Det[x].Prod.comb.qTemp    , tcDe4);
    (*L120*)Monta( NFe.Det[x].Prod.comb.UFcons   );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdLA07;
Var
  IBase , x : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
     IBase := MontaISaber('H', x );
    Initialize('LA07');
    (*L106*)Monta( NFe.Det[x].Prod.comb.CIDE.qBCprod   , tcDe4);
    (*L107*)Monta( NFe.Det[x].Prod.comb.CIDE.vAliqProd , tcDe4);
    (*L108*)Monta( NFe.Det[x].Prod.comb.CIDE.vCIDE     , tcDe2);
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdM;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x  );
    Initialize('M');
    if  NFe.Det[x].Imposto.vTotTrib > 0 then
      (*M02*)Monta( NFe.Det[x].Imposto.vTotTrib , tcDe2);
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdN02;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x  );
    Initialize('N02');
    (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
    (*N12*)Monta( CSTICMSToStr( NFe.Det[x].Imposto.ICMS.CST   ));
    (*N13*)Monta(   modBCToStr( NFe.Det[x].Imposto.ICMS.modBC ));
    (*N15*)Monta( NFe.Det[x].Imposto.ICMS.vBC   , tcDe2 );
    (*N16*)Monta( NFe.Det[x].Imposto.ICMS.pICMS , tcDe2 );
    (*N17*)Monta( NFe.Det[x].Imposto.ICMS.vICMS , tcDe2 );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdN03;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('N03');
    (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
    (*N12*)Monta( CSTICMSToStr( NFe.Det[x].Imposto.ICMS.CST   ));
    (*N13*)Monta(   modBCToStr( NFe.Det[x].Imposto.ICMS.modBC ));
    (*N15*)Monta( NFe.Det[x].Imposto.ICMS.vBC     , tcDe2 );
    (*N16*)Monta( NFe.Det[x].Imposto.ICMS.pICMS   , tcDe2 );
    (*N17*)Monta( NFe.Det[x].imposto.ICMS.vICMS   , tcDe2 );
    (*N18*)Monta( modBCSTToStr( NFe.Det[x].Imposto.ICMS.modBCST ));
    (*N19*)Monta( NFe.Det[x].Imposto.ICMS.pMVAST  , tcDe2 );
    (*N20*)Monta( NFe.Det[x].Imposto.ICMS.pRedBCST, tcDe2 );
    (*N21*)Monta( NFe.Det[x].Imposto.ICMS.vBCST   , tcDe2 );
    (*N22*)Monta( NFe.Det[x].Imposto.ICMS.pICMSST , tcDe2 );
    (*N23*)Monta( NFe.Det[x].Imposto.ICMS.vICMSST , tcDe2 );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdN04;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('N04');
    (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
    (*N12*)Monta( CSTICMSToStr( NFe.Det[x].Imposto.ICMS.CST   ));
    (*N13*)Monta(   modBCToStr( NFe.Det[x].Imposto.ICMS.modBC ));
    (*N14*)Monta( NFe.Det[x].Imposto.ICMS.pRedBC  , tcDe2 );
    (*N15*)Monta( NFe.Det[x].Imposto.ICMS.vBC     , tcDe2 );
    (*N16*)Monta( NFe.Det[x].Imposto.ICMS.pICMS   , tcDe2 );
    (*N17*)Monta( NFe.Det[x].imposto.ICMS.vICMS   , tcDe2 );
    (*N32*)Monta( NFe.Det[x].Imposto.ICMS.vICMSDeson  , tcDe2 );
    (*N28*)Monta( motDesICMSToStr( NFe.Det[x].Imposto.ICMS.motDesICMS ));
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdN05;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('N05');
    (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
    (*N12*)Monta( CSTICMSToStr( NFe.Det[x].Imposto.ICMS.CST   ));
    (*N18*)Monta( modBCSTToStr( NFe.Det[x].Imposto.ICMS.modBCST ));
    (*N19*)Monta( NFe.Det[x].Imposto.ICMS.pMVAST  , tcDe2 );
    (*N20*)Monta( NFe.Det[x].Imposto.ICMS.pRedBCST, tcDe2 );
    (*N21*)Monta( NFe.Det[x].Imposto.ICMS.vBCST   , tcDe2 );
    (*N22*)Monta( NFe.Det[x].Imposto.ICMS.pICMSST , tcDe2 );
    (*N23*)Monta( NFe.Det[x].Imposto.ICMS.vICMSST , tcDe2 );
    (*N32*)Monta( NFe.Det[x].Imposto.ICMS.vICMSDeson  , tcDe2 );
    (*N28*)Monta( motDesICMSToStr( NFe.Det[x].Imposto.ICMS.motDesICMS ));
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdN06;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('N06');
    (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
    (*N12*)Monta( CSTICMSToStr( NFe.Det[x].Imposto.ICMS.CST   ));
    (*N32*)Monta( NFe.Det[x].Imposto.ICMS.vICMSDeson  , tcDe2 );
    (*N28*)Monta( motDesICMSToStr( NFe.Det[x].Imposto.ICMS.motDesICMS ));
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdN07;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('N07');
    (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
    (*N12*)Monta( CSTICMSToStr( NFe.Det[x].Imposto.ICMS.CST   ));
    (*N13*)Monta(   modBCToStr( NFe.Det[x].Imposto.ICMS.modBC ));
    (*N14*)Monta( NFe.Det[x].Imposto.ICMS.pRedBC  , tcDe2 );
    (*N15*)Monta( NFe.Det[x].Imposto.ICMS.vBC     , tcDe2 );
    (*N16*)Monta( NFe.Det[x].Imposto.ICMS.pICMS   , tcDe2 );
           Monta( NFe.Det[x].imposto.ICMS.vICMSOp , tcDe2 );
           Monta( NFe.Det[x].Imposto.ICMS.pDif    , tcDe2 );
           Monta( NFe.Det[x].Imposto.ICMS.vICMSDif, tcDe2 );
    (*N17*)Monta( NFe.Det[x].imposto.ICMS.vICMS   , tcDe2 );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdN08;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('N08');
    (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
    (*N12*)Monta( CSTICMSToStr( NFe.Det[x].Imposto.ICMS.CST   ));
    (*N18*)Monta( modBCSTToStr( NFe.Det[x].Imposto.ICMS.modBCST ));
    (*N26*)Monta( NFe.Det[x].Imposto.ICMS.vBCSTRet    , tcDe2 );
    (*N27*)Monta( NFe.Det[x].Imposto.ICMS.vICMSSTRet   , tcDe2 );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdN09;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('N09');
    (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
    (*N12*)Monta( CSTICMSToStr( NFe.Det[x].Imposto.ICMS.CST   ));
    (*N13*)Monta(   modBCToStr( NFe.Det[x].Imposto.ICMS.modBC ));
    (*N14*)Monta( NFe.Det[x].Imposto.ICMS.pRedBC  , tcDe2 );
    (*N15*)Monta( NFe.Det[x].Imposto.ICMS.vBC     , tcDe2 );
    (*N16*)Monta( NFe.Det[x].Imposto.ICMS.pICMS   , tcDe2 );
    (*N17*)Monta( NFe.Det[x].imposto.ICMS.vICMS   , tcDe2 );
    (*N18*)Monta( modBCSTToStr( NFe.Det[x].Imposto.ICMS.modBCST ));
    (*N19*)Monta( NFe.Det[x].Imposto.ICMS.pMVAST  , tcDe2 );
    (*N20*)Monta( NFe.Det[x].Imposto.ICMS.pRedBCST, tcDe2 );
    (*N21*)Monta( NFe.Det[x].Imposto.ICMS.vBCST   , tcDe2 );
    (*N22*)Monta( NFe.Det[x].Imposto.ICMS.pICMSST , tcDe2 );
    (*N23*)Monta( NFe.Det[x].Imposto.ICMS.vICMSST , tcDe2 );
    (*N32*)Monta( NFe.Det[x].Imposto.ICMS.vICMSDeson  , tcDe2 );
    (*N28*)Monta( motDesICMSToStr( NFe.Det[x].Imposto.ICMS.motDesICMS ));
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdN10;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x  );
    Initialize('N10');
    (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
    (*N12*)Monta( CSTICMSToStr( NFe.Det[x].Imposto.ICMS.CST   ));
    (*N13*)Monta(   modBCToStr( NFe.Det[x].Imposto.ICMS.modBC ));
    (*N15*)Monta( NFe.Det[x].Imposto.ICMS.vBC     , tcDe2 );
    (*N14*)Monta( NFe.Det[x].Imposto.ICMS.pRedBC  , tcDe2 );
    (*N16*)Monta( NFe.Det[x].Imposto.ICMS.pICMS   , tcDe2 );
    (*N17*)Monta( NFe.Det[x].imposto.ICMS.vICMS   , tcDe2 );
    (*N18*)Monta( modBCSTToStr( NFe.Det[x].Imposto.ICMS.modBCST ));
    (*N19*)Monta( NFe.Det[x].Imposto.ICMS.pMVAST  , tcDe2 );
    (*N20*)Monta( NFe.Det[x].Imposto.ICMS.pRedBCST, tcDe2 );
    (*N21*)Monta( NFe.Det[x].Imposto.ICMS.vBCST   , tcDe2 );
    (*N22*)Monta( NFe.Det[x].Imposto.ICMS.pICMSST , tcDe2 );
    (*N23*)Monta( NFe.Det[x].Imposto.ICMS.vICMSST , tcDe2 );
    (*N32*)Monta( NFe.Det[x].Imposto.ICMS.vICMSDeson  , tcDe2 );
    (*N28*)Monta( motDesICMSToStr( NFe.Det[x].Imposto.ICMS.motDesICMS ));
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdN10A;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§N10' );
  try
    if fListaConteudo.Count > 0 then
    begin
      for x := 0 to  NFe.Det.Count - 1 do
      begin
        if ListaComparar( fListaConteudo[x],'§N10a') then
        begin
          Inc( IBase );
          IBase := MontaISaberString('§N10a', IBase );
          if ( IBase > 0 ) then
          begin
            Initialize('N10a');
            (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
            (*N12*)Monta( CSTICMSToStr( NFe.Det[x].Imposto.ICMS.CST   ));
            (*N13*)Monta(   modBCToStr( NFe.Det[x].Imposto.ICMS.modBC ));
            (*N14*)Monta( NFe.Det[x].Imposto.ICMS.pRedBC  , tcDe2 );
            (*N16*)Monta( NFe.Det[x].Imposto.ICMS.pICMS   , tcDe2 );
            (*N17*)Monta( NFe.Det[x].imposto.ICMS.vICMS   , tcDe2 );
            (*N18*)Monta( modBCSTToStr( NFe.Det[x].Imposto.ICMS.modBCST ));
            (*N19*)Monta( NFe.Det[x].Imposto.ICMS.pMVAST  , tcDe2 );
            (*N20*)Monta( NFe.Det[x].Imposto.ICMS.pRedBCST, tcDe2 );
            (*N21*)Monta( NFe.Det[x].Imposto.ICMS.vBCST   , tcDe2 );
            (*N22*)Monta( NFe.Det[x].Imposto.ICMS.pICMSST , tcDe2 );
            (*N23*)Monta( NFe.Det[x].Imposto.ICMS.vICMSST , tcDe2 );
            (*N25*)Monta( NFe.Det[x].Imposto.ICMS.pBCOp   , tcDe2 );
            (*N24*)Monta( NFe.Det[x].Imposto.ICMS.UFST    );
            finalize;
            CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
          end;
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('N10a');
      (*N11*)Monta( 0 );
      (*N12*)Monta( 0 );
      (*N13*)Monta( 0 );
      (*N14*)Monta( 0 , tcDe2 );
      (*N16*)Monta( 0 , tcDe2 );
      (*N17*)Monta( 0 , tcDe2 );
      (*N18*)Monta( 0 );
      (*N19*)Monta( 0 , tcDe2 );
      (*N20*)Monta( 0 , tcDe2 );
      (*N21*)Monta( 0 , tcDe2 );
      (*N22*)Monta( 0 , tcDe2 );
      (*N23*)Monta( 0 , tcDe2 );
      (*N25*)Monta( 0 , tcDe2 );
      (*N24*)Monta( '');
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;


procedure TAcBrLerTxtTDD.IdN10B;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§N10' );
  try
    if fListaConteudo.Count > 0 then
    begin
      for x := 0 to  NFe.Det.Count - 1 do
      begin
        if ListaComparar( fListaConteudo[x],'§N10b') then
        begin
          Inc( IBase );
          IBase := MontaISaberString('§N10b', IBase );
          if ( IBase > 0 ) then
          begin
            Initialize('N10b');
            (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
            (*N12*)Monta( CSTICMSToStr( NFe.Det[x].Imposto.ICMS.CST   ));
            (*N26*)Monta( NFe.Det[x].Imposto.ICMS.vBCSTRet     , tcDe2 );
            (*N27*)Monta( NFe.Det[x].Imposto.ICMS.vICMSSTRet   , tcDe2 );
            (*N31*)Monta( NFe.Det[x].Imposto.ICMS.vBCSTDest    , tcDe2 );
                   Monta( NFe.Det[x].Imposto.ICMS.vICMSSTDest  , tcDe2 );
            finalize;
            CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
          end;
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('N10b');
      (*N11*)Monta( 0 );
      (*N12*)Monta( 0 );
      (*N26*)Monta( 0 , tcDe2 );
      (*N27*)Monta( 0 , tcDe2 );
      (*N31*)Monta( 0 , tcDe2 );
             Monta( 0 , tcDe2 );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdN10C;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§N10' );
  try
    if fListaConteudo.Count > 0 then
    begin
      for x := 0 to  NFe.Det.Count - 1 do
      begin
        if ListaComparar( fListaConteudo[x],'§N10c') then
        begin
          Inc( IBase );
          IBase := MontaISaberString('§N10c', IBase );
          if ( IBase > 0 ) then
          begin
            Initialize('N10c');
            (*N11*)Monta(      OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
           (*N12a*)Monta( CSOSNIcmsToStr( NFe.Det[x].Imposto.ICMS.CSOSN ));
            (*N29*)Monta( NFe.Det[x].Imposto.ICMS.pCredSN      , tcDe2 );
            (*N30*)Monta( NFe.Det[x].Imposto.ICMS.vCredICMSSN  , tcDe2 );
            finalize;
            CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
          end;
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('N10c');
      (*N11*)Monta( 0 );
     (*N12a*)Monta( 0 );
      (*N29*)Monta( 0 , tcDe2 );
      (*N30*)Monta( 0 , tcDe2 );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;


procedure TAcBrLerTxtTDD.IdN10d;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§N10' );
  try
    if fListaConteudo.Count > 0 then
    begin
      for x := 0 to  NFe.Det.Count - 1 do
      begin
        if ListaComparar( fListaConteudo[x],'§N10d') then
        begin
          Inc( IBase );
          IBase := MontaISaberString('§N10d', IBase );
          if ( IBase > 0 ) then
          begin
            Initialize('N10d');
            (*N11 *)Monta(      OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
            (*N12a*)Monta( CSOSNIcmsToStr( NFe.Det[x].Imposto.ICMS.CSOSN ));
            finalize;
            CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
          end;
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('N10d');
      (*N11*)Monta( 0 );
     (*N12a*)Monta( 0 );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.idN10E;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§N10' );
  try
    if fListaConteudo.Count > 0 then
    begin
      for x := 0 to  NFe.Det.Count - 1 do
      begin
        if ListaComparar( fListaConteudo[x],'§N10e') then
        begin
          Inc( IBase );
          IBase := MontaISaberString('§N10e', IBase );
          if ( IBase > 0 ) then
          begin
            Initialize('N10e');
            (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
           (*N12a*)Monta( CSOSNIcmsToStr( NFe.Det[x].Imposto.ICMS.CSOSN ));
            (*N13*)Monta(   modBCToStr( NFe.Det[x].Imposto.ICMS.modBC ));
            (*N14*)Monta( NFe.Det[x].Imposto.ICMS.pRedBC  , tcDe2 );
            (*N18*)Monta( modBCSTToStr( NFe.Det[x].Imposto.ICMS.modBCST ));
            (*N19*)Monta( NFe.Det[x].Imposto.ICMS.pMVAST  , tcDe2 );
            (*N20*)Monta( NFe.Det[x].Imposto.ICMS.pRedBCST, tcDe2 );
            (*N21*)Monta( NFe.Det[x].Imposto.ICMS.vBCST   , tcDe2 );
            (*N22*)Monta( NFe.Det[x].Imposto.ICMS.pICMSST , tcDe2 );
            (*N23*)Monta( NFe.Det[x].Imposto.ICMS.vICMSST , tcDe2 );
            (*N29*)Monta( NFe.Det[x].Imposto.ICMS.pCredSN      , tcDe2 );
            (*N30*)Monta( NFe.Det[x].Imposto.ICMS.vCredICMSSN  , tcDe2 );
            finalize;
            CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
          end;
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('N10e');
      (*N11*)Monta( 0 );
     (*N12a*)Monta( 0 );
      (*N13*)Monta( 0 );
      (*N14*)Monta( 0 , tcDe2 );
      (*N18*)Monta( 0 );
      (*N19*)Monta( 0 , tcDe2 );
      (*N20*)Monta( 0 , tcDe2 );
      (*N21*)Monta( 0 , tcDe2 );
      (*N22*)Monta( 0 , tcDe2 );
      (*N23*)Monta( 0 , tcDe2 );
      (*N29*)Monta( 0 , tcDe2 );
      (*N30*)Monta( 0 , tcDe2 );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdN10F;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§N10' );
  try
    if fListaConteudo.Count > 0 then
    begin
      for x := 0 to  NFe.Det.Count - 1 do
      begin
        if ListaComparar( fListaConteudo[x], '§N10f') then
        begin
          Inc( IBase );
          IBase := MontaISaberString('§N10f', IBase );
          if ( IBase > 0 ) then
          begin
            Initialize('N10f');
            (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
           (*N12a*)Monta( CSOSNIcmsToStr( NFe.Det[x].Imposto.ICMS.CSOSN ));
            (*N18*)Monta( modBCSTToStr( NFe.Det[x].Imposto.ICMS.modBCST ));
            (*N19*)Monta( NFe.Det[x].Imposto.ICMS.pMVAST  , tcDe2 );
            (*N20*)Monta( NFe.Det[x].Imposto.ICMS.pRedBCST, tcDe2 );
            (*N21*)Monta( NFe.Det[x].Imposto.ICMS.vBCST   , tcDe2 );
            (*N22*)Monta( NFe.Det[x].Imposto.ICMS.pICMSST , tcDe2 );
            (*N23*)Monta( NFe.Det[x].Imposto.ICMS.vICMSST , tcDe2 );
            finalize;
            CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
          end;
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('N10f');
      (*N11*)Monta( 0 );
     (*N12a*)Monta( 0 );
      (*N18*)Monta( 0);
      (*N19*)Monta( 0 , tcDe2 );
      (*N20*)Monta( 0 , tcDe2 );
      (*N21*)Monta( 0 , tcDe2 );
      (*N22*)Monta( 0 , tcDe2 );
      (*N23*)Monta( 0 , tcDe2 );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdN10G;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§N10' );
  try
    if fListaConteudo.Count > 0 then
    begin
      for x := 0 to  NFe.Det.Count - 1 do
      begin
        if ListaComparar( fListaConteudo[x] ,  '§N10g') then
        begin
          Inc( IBase );
          IBase := MontaISaberString('§N10g', IBase );
          if ( IBase > 0 ) then
          begin
            Initialize('N10g');
            (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
           (*N12a*)Monta( CSOSNIcmsToStr( NFe.Det[x].Imposto.ICMS.CSOSN ));
            (*N26*)Monta( NFe.Det[x].Imposto.ICMS.vBCSTRet     , tcDe2 );
            (*N27*)Monta( NFe.Det[x].Imposto.ICMS.vICMSSTRet   , tcDe2 );
            finalize;
            CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
          end
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('N10g');
          (*N11*)Monta( 0 );
         (*N12a*)Monta( 0 );
          (*N26*)Monta( 0 , tcDe2 );
          (*N27*)Monta( 0 , tcDe2 );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdN10H;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§N10' );
  try
    if fListaConteudo.Count > 0 then
    begin
      for x := 0 to  NFe.Det.Count - 1 do
      begin
        if ListaComparar( fListaConteudo[x] ,  '§N10h') then
        begin
          Inc( IBase );
          IBase := MontaISaberString('§N10h', IBase );
          if ( IBase > 0 ) then
          begin
            Initialize('N10h');
            (*N11*)Monta(    OrigToStr( NFe.Det[x].Imposto.ICMS.orig  ));
           (*N12a*)Monta( CSOSNIcmsToStr( NFe.Det[x].Imposto.ICMS.CSOSN ));
            (*N13*)Monta(   modBCToStr( NFe.Det[x].Imposto.ICMS.modBC ));
            (*N15*)Monta( NFe.Det[x].Imposto.ICMS.vBC     , tcDe2 );
            (*N14*)Monta( NFe.Det[x].Imposto.ICMS.pRedBC  , tcDe2 );
            (*N16*)Monta( NFe.Det[x].Imposto.ICMS.pICMS   , tcDe2 );
            (*N17*)Monta( NFe.Det[x].imposto.ICMS.vICMS   , tcDe2 );
            (*N18*)Monta( modBCSTToStr( NFe.Det[x].Imposto.ICMS.modBCST ));
            (*N19*)Monta( NFe.Det[x].Imposto.ICMS.pMVAST  , tcDe2 );
            (*N20*)Monta( NFe.Det[x].Imposto.ICMS.pRedBCST, tcDe2 );
            (*N21*)Monta( NFe.Det[x].Imposto.ICMS.vBCST   , tcDe2 );
            (*N22*)Monta( NFe.Det[x].Imposto.ICMS.pICMSST , tcDe2 );
            (*N23*)Monta( NFe.Det[x].Imposto.ICMS.vICMSST , tcDe2 );
            (*N29*)Monta( NFe.Det[x].Imposto.ICMS.pCredSN      , tcDe2 );
            (*N30*)Monta( NFe.Det[x].Imposto.ICMS.vCredICMSSN  , tcDe2 );
            finalize;
            CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
          end;
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('N10h');
      (*N11*)Monta( 0 );
     (*N12a*)Monta( 0 );
      (*N13*)Monta( 0 );;
      (*N15*)Monta( 0 , tcDe2 );
      (*N14*)Monta( 0 , tcDe2 );
      (*N16*)Monta( 0 , tcDe2 );
      (*N17*)Monta( 0 , tcDe2 );
      (*N18*)Monta( 0 );
      (*N19*)Monta( 0 , tcDe2 );
      (*N20*)Monta( 0 , tcDe2 );
      (*N21*)Monta( 0 , tcDe2 );
      (*N22*)Monta( 0 , tcDe2 );
      (*N23*)Monta( 0 , tcDe2 );
      (*N29*)Monta( 0 , tcDe2 );
      (*N30*)Monta( 0 , tcDe2 );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.idNA;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('NA');
    Monta( NFe.Det[x].Imposto.ICMSUFDest.vBCUFDest     , tcDe2);
    Monta( NFe.Det[x].Imposto.ICMSUFDest.pFCPUFDest    , tcDe2);
    Monta( NFe.Det[x].Imposto.ICMSUFDest.vFCPUFDest    , tcDe2);
    Monta( NFe.Det[x].Imposto.ICMSUFDest.pICMSUFDest   , tcDe2);
    Monta( NFe.Det[x].Imposto.ICMSUFDest.pICMSInter    , tcDe2);
    Monta( NFe.Det[x].Imposto.ICMSUFDest.pICMSInterPart, tcDe2);
    Monta( NFe.Det[x].Imposto.ICMSUFDest.vICMSUFDest   , tcDe2);
    Monta( NFe.Det[x].Imposto.ICMSUFDest.vICMSUFRemet  , tcDe2);
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdO;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('O');
    (*O02*) Monta(NFe.Det[x].Imposto.IPI.clEnq    );
    (*O03*) Monta(NFe.Det[x].Imposto.IPI.CNPJProd );
    (*O04*) Monta(NFe.Det[x].Imposto.IPI.cSelo    );
    (*O05*) Monta(NFe.Det[x].Imposto.IPI.qSelo    , tcInt);
    (*O06*) Monta(NFe.Det[x].Imposto.IPI.cEnq     );
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdO07;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('O07');
    (*O09*) Monta( CSTIPIToStr( NFe.Det[x].Imposto.IPI.CST  ));
    (*O14*) Monta( NFe.Det[x].Imposto.IPI.vIPI , tcDe2);
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdO10;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('O10');
    (*O10*)Monta( NFe.Det[x].Imposto.IPI.vBC   , tcDe2);
    (*O13*)Monta( NFe.Det[x].Imposto.IPI.pIPI  , tcDe2);
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdO11;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('O11');
    (*O11*)Monta( NFe.Det[x].Imposto.IPI.qUnid, tcDe4);
    (*O12*)Monta( NFe.Det[x].Imposto.IPI.vUnid, tcDe4);
    (*O14*)Monta( NFe.Det[x].Imposto.IPI.vIPI , tcDe2);
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdP;
Var
  IBase , x : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('P');
    (*P02*)Monta( NFe.Det[x].Imposto.II.vBc      , tcDe2);
    (*P03*)Monta( NFe.Det[x].Imposto.II.vDespAdu , tcDe2);
    (*P04*)Monta( NFe.Det[x].Imposto.II.vII      , tcDe2);
    (*P05*)Monta( NFe.Det[x].Imposto.II.vIOF     , tcDe2);
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdQ02;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x  );
    Initialize('Q02');
    (*Q06*)Monta(  CSTPISToStr( NFe.Det[x].Imposto.PIS.CST ));
    (*Q07*)Monta( NFe.Det[x].Imposto.PIS.vBC   , tcDe2);
    (*Q08*)Monta( NFe.Det[x].Imposto.PIS.pPIS  , tcDe2);
    (*Q09*)Monta( NFe.Det[x].Imposto.PIS.vPIS  , tcDe2);
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdQ03;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('Q032');
    (*Q06*)Monta( CSTPISToStr( NFe.Det[x].Imposto.PIS.CST ));
    (*Q10*)Monta( NFe.Det[x].Imposto.PIS.qBCProd   , tcDe4 );
    (*Q11*)Monta( NFe.Det[x].Imposto.PIS.vAliqProd , tcDe4 );
    (*Q09*)Monta( NFe.Det[x].Imposto.PIS.vPIS      , tcDe2 );
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdQ04;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x  );
    Initialize('Q04');
    (*Q06*)Monta(CSTPISToStr( NFe.Det[x].Imposto.PIS.CST ));
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdQ05;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
     IBase := MontaISaber('H', x );
    Initialize('Q05');
    (*Q06*)Monta( CSTPISToStr( NFe.Det[x].Imposto.PIS.CST ));
    (*Q09*)Monta( NFe.Det[x].Imposto.PIS.vPIS , tcDe2);
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdQ07;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x  );
    Initialize('Q07');
    (*Q07*)Monta( NFe.Det[x].Imposto.PIS.vBC , tcDe2 );
    (*Q08*)Monta( NFe.Det[x].Imposto.PIS.pPIS , tcDe2 );
             if ( Nfe.infNFe.Versao < 3.10) then
    (*Q09*)Monta( NFe.Det[x].Imposto.PIS.vPIS , tcDe2 );
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdQ10;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('Q10');
    (*Q10*)Monta( NFe.Det[x].Imposto.PIS.qBCProd   , tcDe4 );
    (*Q11*)Monta( NFe.Det[x].Imposto.PIS.vAliqProd , tcDe4 );
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdR;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('R');
    (*R06*)Monta( NFe.Det[x].Imposto.PISST.vPIS , tcDe2 );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdR02;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x  );
    Initialize('R02');
    (*R02*)Monta( NFe.Det[x].Imposto.PISST.vBc , tcDe2 );
    (*R03*)Monta( NFe.Det[x].Imposto.PISST.pPis , tcDe2 );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdR04;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('R04');
    (*R04*)Monta( NFe.Det[x].Imposto.PISST.qBCProd   , tcDe4 );
    (*R05*)Monta( NFe.Det[x].Imposto.PISST.vAliqProd , tcDe4 );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdS02;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x  );
    Initialize('S02');
    (*S06*)Monta( CSTCOFINSToStr(NFe.Det[x].Imposto.COFINS.CST ));
    (*S07*)Monta( NFe.Det[x].Imposto.COFINS.vBC      , tcDe2);
    (*S08*)Monta( NFe.Det[x].Imposto.COFINS.pCOFINS  , tcDe2);
    (*S11*)Monta( NFe.Det[x].Imposto.COFINS.vCOFINS  , tcDe2);
    Finalize;
    CheckEquals( Registro ,RetornaConteudopos( sComparar,iBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdS03;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('S03');
    (*S06*)Monta( CSTCOFINSToStr( NFe.Det[x].Imposto.COFINS.CST ) );
    (*S07*)Monta( NFe.Det[x].Imposto.COFINS.vBC      , tcDe2 );
    (*S09*)Monta( NFe.Det[x].Imposto.COFINS.qBCProd  , tcDe4);
    (*S10*)Monta( NFe.Det[x].Imposto.COFINS.vAliqProd, tcDe4);
    (*S11*)Monta( NFe.Det[x].Imposto.COFINS.vCOFINS  , tcDe2);
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdS04;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('S04');
    (*S06*)Monta( CSTCOFINSToStr( NFe.Det[x].Imposto.COFINS.CST ));
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdS05;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('S05');
    (*S06*)Monta( CSTCOFINSToStr(  NFe.Det[x].Imposto.COFINS.CST ));
    (*S11*)Monta( NFe.Det[x].Imposto.COFINS.vCOFINS , tcDe2);
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdS07;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('S07');
    (*S07*)Monta( NFe.Det[x].Imposto.COFINS.vBC , tcDe2 );
    (*S08*)Monta( NFe.Det[x].Imposto.COFINS.pCOFINS , tcDe2);
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdS09;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('S09');
    (*S09*)Monta( NFe.Det[x].Imposto.COFINS.qBCProd   , tcDe4 );
    (*S10*)Monta( NFe.Det[x].Imposto.COFINS.vAliqProd , tcDe4 );
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdT04;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('T04');
    (*T04*)Monta( NFe.Det[x].Imposto.COFINSST.qBCProd , tcDe4);
    (*T05*)Monta( NFe.Det[x].Imposto.COFINSST.vAliqProd , tcDe4);
    Finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdU;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x  );
    Initialize('U');
    (*U02*)Monta( NFe.Det[x].Imposto.ISSQN.vBC           , tcDe2 );
    (*U03*)Monta( NFe.Det[x].Imposto.ISSQN.vAliq         , tcDe2);
    (*U04*)Monta( NFe.Det[x].Imposto.ISSQN.vISSQN        , tcDe2);
    (*U05*)Monta( NFe.Det[x].Imposto.ISSQN.cMunFG        , tcInt);
    (*U06*)Monta( NFe.Det[x].Imposto.ISSQN.cListServ     );
           Monta( NFe.Det[x].Imposto.ISSQN.vDeducao      , tcDe2);
           Monta( NFe.Det[x].Imposto.ISSQN.vOutro        , tcDe2);
           Monta( NFe.Det[x].Imposto.ISSQN.vDescIncond   , tcDe2);
           Monta( NFe.Det[x].Imposto.ISSQN.vDescCond     , tcDe2);
           Monta( NFe.Det[x].Imposto.ISSQN.vISSRet       , tcDe2);
           Monta( NFe.Det[x].Imposto.ISSQN.indISS        );
           Monta( NFe.Det[x].Imposto.ISSQN.cServico      );
           Monta( NFe.Det[x].Imposto.ISSQN.cMun          );
           Monta( NFe.Det[x].Imposto.ISSQN.cPais         );
           Monta( NFe.Det[x].Imposto.ISSQN.nProcesso     );
           Monta( IndIncentivoToStr( NFe.Det[x].Imposto.ISSQN.indIncentivo ) );
    (*U07*)Monta( ISSQNcSitTribToStr( NFe.Det[x].Imposto.ISSQN.cSitTrib ));
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdUA;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('UA');
    Monta( NFe.Det[x].pDevol    , tcDe2);
    Monta( NFe.Det[x].vIPIDevol , tcDe2);
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdW02;
begin
  Initialize('W02');
  (*W03*)Monta( NFe.Total.ICMSTot.vBC        , tcDe2);
  (*W04*)Monta( NFe.Total.ICMSTot.vICMS      , tcDe2);
           if ( NFe.infNFe.Versao >= 3.10) then
         Monta( NFe.Total.ICMSTot.vICMSDeson , tcDe2);
  (*W05*)Monta( NFe.Total.ICMSTot.vBCST      , tcDe2);
  (*W06*)Monta( NFe.Total.ICMSTot.vST        , tcDe2);
  (*W07*)Monta( NFe.Total.ICMSTot.vProd      , tcDe2);
  (*W08*)Monta( NFe.Total.ICMSTot.vFrete     , tcDe2);
  (*W09*)Monta( NFe.Total.ICMSTot.vSeg       , tcDe2);
  (*W10*)Monta( NFe.Total.ICMSTot.vDesc      , tcDe2);
  (*W11*)Monta( NFe.Total.ICMSTot.vII        , tcDe2);
  (*W12*)Monta( NFe.Total.ICMSTot.vIPI       , tcDe2);
  (*W13*)Monta( NFe.Total.ICMSTot.vPIS       , tcDe2);
  (*W14*)Monta( NFe.Total.ICMSTot.vCOFINS    , tcDe2);
  (*W15*)Monta( NFe.Total.ICMSTot.vOutro     , tcDe2);
  (*W16*)Monta( NFe.Total.ICMSTot.vNF        , tcDe2);
  if NFe.Total.ICMSTot.vTotTrib > 0 then
   (*W16a*)Monta( NFe.Total.ICMSTot.vTotTrib , tcDe2)
  else
   (*W16a*)Monta( '');

  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdW04c;
begin
  Initialize('W04c');
  (*W04c*)Monta( NFe.Total.ICMSTot.vFCPUFDest   , tcDe2);
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;
procedure TAcBrLerTxtTDD.IdW04e;
begin
  Initialize('W04e');
  (*W04e*)Monta( NFe.Total.ICMSTot.vICMSUFDest  , tcDe2);
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdW04g;
begin
  Initialize('W04g');
  (*W04g*)Monta( NFe.Total.ICMSTot.vICMSUFRemet , tcDe2);
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdW17;
begin
  Initialize('W17');
  (*W18*)Monta( NFe.Total.ISSQNtot.vServ       , tcDe2 );
  (*W19*)Monta( NFe.Total.ISSQNtot.vBC         , tcDe2 );
  (*W20*)Monta( NFe.Total.ISSQNtot.vISS        , tcDe2 );
  (*W21*)Monta( NFe.Total.ISSQNtot.vPIS        , tcDe2 );
  (*W22*)Monta( NFe.Total.ISSQNtot.vCOFINS     , tcDe2 );
         Monta( NFe.Total.ISSQNtot.dCompet     , tcDat );
         Monta( NFe.Total.ISSQNtot.vDeducao    , tcDe2 );
         Monta( NFe.Total.ISSQNtot.vOutro      , tcDe2 );
         Monta( NFe.Total.ISSQNtot.vDescIncond , tcDe2 );
         Monta( NFe.Total.ISSQNtot.vDescCond   , tcDe2 );
         Monta( NFe.Total.ISSQNtot.vISSRet     , tcDe2 );
         Monta( RegTribISSQNToStr(NFe.Total.ISSQNtot.cRegTrib));
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdW23;
begin
  Initialize('dW23');
  (*W24*)Monta( NFe.Total.retTrib.vRetPIS    , tcDe2 );
  (*W25*)Monta( NFe.Total.retTrib.vRetCOFINS , tcDe2 );
  (*W26*)Monta( NFe.Total.retTrib.vRetCSLL   , tcDe2 );
  (*W27*)Monta( NFe.Total.retTrib.vBCIRRF    , tcDe2 );
  (*W28*)Monta( NFe.Total.retTrib.vIRRF      , tcDe2 );
  (*W29*)Monta( NFe.Total.retTrib.vBCRetPrev , tcDe2 );
  (*W30*)Monta( NFe.Total.retTrib.vRetPrev   , tcDe2 );
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdX;
begin
  Initialize('X');
 (*X02*)Monta( modFreteToStr(NFe.Transp.modFrete ));
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;


procedure TAcBrLerTxtTDD.IdX03;
begin
  Initialize('X03');
  (*X06*)Monta( NFe.Transp.Transporta.xNome  );
  (*X07*)Monta( NFe.Transp.Transporta.IE     );
  (*X08*)Monta( NFe.Transp.Transporta.xEnder );
  (*X09*)Monta( NFe.Transp.Transporta.xMun   );
  (*X10*)Monta( NFe.Transp.Transporta.UF     );
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;


procedure TAcBrLerTxtTDD.IdX04;
begin
  Initialize('X04');
  (*X04*)Monta( NFe.Transp.Transporta.CNPJCPF  );
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdX05;
begin
  Initialize('X05');
  (*X05*)Monta( NFe.Transp.Transporta.CNPJCPF  );
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;


procedure TAcBrLerTxtTDD.IdX11;
begin
  Initialize('X11');
  (*X12*)Monta( NFe.Transp.retTransp.vServ     , tcDe2);
  (*X13*)Monta( NFe.Transp.retTransp.vBCRet    , tcDe2 );
  (*X14*)Monta( NFe.Transp.retTransp.pICMSRet  , tcDe2 );
  (*X15*)Monta( NFe.Transp.retTransp.vICMSRet  , tcDe2 );
  (*X16*)Monta( NFe.Transp.retTransp.CFOP       );
  (*X17*)Monta( NFe.Transp.retTransp.cMunFG     );
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdX18;
begin
  Initialize('X18');
  (*X19*)Monta( NFe.Transp.veicTransp.placa  );
  (*X20*)Monta( NFe.Transp.veicTransp.UF     );
  (*X21*)Monta( NFe.Transp.veicTransp.RNTC   );
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;
procedure TAcBrLerTxtTDD.IdX26;
Var
  xi : Integer;
begin
  for xi := 0 to  NFe.Transp.Vol.Count - 1 do
  begin
    Initialize('X26');
    (*X27*)Monta( NFe.Transp.Vol[xi].qVol  , tcInt );
    (*X28*)Monta( NFe.Transp.vol[xi].esp    );
    (*X29*)Monta( NFe.Transp.Vol[xi].marca  );
    (*X30*)Monta( NFe.Transp.Vol[xi].nVol   );
    (*X31*)Monta( NFe.Transp.Vol[xi].pesoL , tcDe3 );
    (*X32*)Monta( NFe.Transp.Vol[xi].pesoB , tcDe3 );
    finalize;
    CheckEquals( Registro ,RetornaConteudo( sComparar));
  end;
end;

procedure TAcBrLerTxtTDD.IdX33;
Var
  fJ,  xi : Integer;
begin
  for xi := 0 to  NFe.Transp.Vol.Count - 1 do
  begin
    Initialize('X33');
    for fJ := 0 to NFe.transp.Vol[xi].lacres.Count - 1 do
    begin
      (*X34*)Monta( NFe.transp.Vol[xi].lacres[fJ].nLacre  );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  end;
end;

procedure TAcBrLerTxtTDD.IdY02;
begin
  Initialize('Y02');
  (*Y03*)Monta( NFe.Cobr.Fat.nFat   );
  (*Y04*)Monta( NFe.Cobr.Fat.vOrig , tcDe2 );
  (*Y05*)Monta( NFe.Cobr.Fat.vDesc , tcDe2 );
  (*Y06*)Monta( NFe.Cobr.Fat.vLiq  , tcDe2 );
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdY07;
Var
  xi : Integer;
begin
  for xi := 0 to  NFe.Cobr.Dup.Count - 1 do
  begin
    Initialize('Y07');
    (*Y08*)Monta( NFe.Cobr.Dup[xi].nDup  );
    (*Y09*)Monta( NFe.Cobr.Dup[xi].dVenc , tcDat );
    (*Y10*)Monta( NFe.Cobr.Dup[xi].vDup  , tcDe2 );
    finalize;
    CheckEquals( Registro ,RetornaConteudo( sComparar));
  end;
end;



procedure TAcBrLerTxtTDD.IdZ;
begin
  Initialize('Z');
  (**)Monta( NFe.InfAdic.infAdFisco );
  (**)Monta( NFe.InfAdic.infCpl);
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;


procedure TAcBrLerTxtTDD.IdZ10;
Var
  xi : Integer;
begin
  for xi := 0 to  NFe.InfAdic.procRef.Count - 1 do
  begin
    Initialize('Z10');
    (*Z11*)Monta( NFe.InfAdic.procRef[xi].nProc    );
    (*Z12*)Monta( indProcToDescrStr(NFe.InfAdic.procRef[xi].indProc ));
    finalize;
    CheckEquals( Registro ,RetornaConteudo( sComparar));
  end;
end;

procedure TAcBrLerTxtTDD.IdZA;
begin
  Initialize('ZA');
  if (nfe.infNFe.Versao < 3.10 ) then
  begin
    (*ZA02*)Monta( NFe.exporta.UFembarq      );
    (*ZA03*)Monta( NFe.exporta.xLocEmbarq    );
  end
  else
  begin
    (*ZA02*)Monta( NFe.exporta.UFSaidaPais   );
    (*ZA03*)Monta( NFe.exporta.xLocExporta   );
    (*ZA04*)Monta( NFe.exporta.xLocDespacho  );
  end;
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdZB;
begin
  Initialize('ZB');
  (*ZB02*)Monta( NFe.compra.xNEmp  );
  (*ZB03*)Monta( NFe.compra.xPed   );
  (*ZB04*)Monta( NFe.compra.xCont  );
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdZC;
begin
  Initialize('ZC');
  Monta( NFe.cana.safra    );
  Monta( NFe.cana.ref      );
  Monta( NFe.cana.qTotMes  , tcDe2);
  Monta( NFe.cana.qTotAnt  , tcDe2);
  Monta( NFe.cana.qTotGer  , tcDe2);
  Monta( NFe.cana.vFor     , tcDe2);
  Monta( NFe.cana.vTotDed  , tcDe2);
  Monta( NFe.cana.vLiqFor  , tcDe2);
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdZC04;
Var
  xi : Integer;
begin
  for xi := 0 to  NFe.cana.fordia.Count - 1 do
  begin
    Initialize('ZC04');
    Monta( NFe.cana.fordia[xi].dia  , tcInt );
    Monta( NFe.cana.fordia[xi].qtde , tcDe10);
    finalize;
    CheckEquals( Registro ,RetornaConteudo( sComparar));
  end;
end;

procedure TAcBrLerTxtTDD.IdZC10;
Var
  xi : Integer;
begin
  for xi := 0 to NFe.cana.deduc.Count - 1 do
  begin
    Initialize('ZC10');
    Monta( NFe.cana.deduc[xi].xDed );
    Monta( NFe.cana.deduc[xi].vDed , tcDe2);
    finalize;
    CheckEquals( Registro ,RetornaConteudo( sComparar));
  end;
end;




Procedure TAcBrLerTxtTDD.MontaDataHora( TAG: Variant ; iCodigoParaUF : Integer );
begin
  if Tag <> StrToTime ('00:00:00' )  then
    Registro := Registro+ DateTimeTodh( TAG ) + GetUTC(CodigoParaUF( iCodigoParaUF), TAG) ;

  Registro := Registro+'|';
end;


procedure TAcBrLerTxtTDD.IdB;
begin
  Initialize( 'B');
  (*B02 *)            Monta( NFe.ide.cUF  , tcInt );
  (*B03 *)MontaZeroEsquerda( NFe.ide.cNF , Config.IntcNF );
  (*B04 *)            Monta( NFe.ide.natOp );
  (*B05 *)            Monta( IndpagToStr( NFe.ide.indPag ));
  (*B06 *)            Monta( NFe.ide.modelo , tcInt );
  (*B07 *)            Monta( NFe.ide.serie  , tcInt );
  (*B08 *)MontaZeroEsquerda( NFe.ide.nNF , Config.IntnNF );
  if nfe.infNFe.Versao > 2 then
  Begin
    (*B09 *)  MontaDataHora( nfe.ide.dEmi, nfe.ide.cUF);
    (*B10 *)  MontaDataHora( nfe.ide.dSaiEnt,nfe.ide.cUF);
  End
  else
  begin
    (*B09 *)          Monta( nfe.ide.dEmi    , tcDat);
    (*B10 *)          Monta( nfe.ide.dSaiEnt , tcDat);
    (*B10a*)          Monta( NFe.ide.hSaiEnt , tcHor );
  end;
  (*B11 *)            Monta( tpNFToStr( NFe.ide.tpNF ) );
  if nfe.infNFe.Versao > 2 then
                      Monta( DestinoOperacaoToStr( NFe.ide.idDest )  );
  (*B12 *)            Monta( NFe.ide.cMunFG , tcInt      );
  (*B21 *)            Monta(  TpImpToStr( NFe.Ide.tpImp   ));
  (*B22 *)            Monta( TpEmisToStr( NFe.Ide.tpEmis ));
  (*B23 *)MontaZeroEsquerda( NFe.Ide.cDV ,Config.IntcDV  );
  (*B24 *)            Monta(  TpAmbToStr( NFe.Ide.tpAmb  ));
  (*B25 *)            Monta( FinNFeToStr( NFe.Ide.finNFe ));
  if nfe.infNFe.Versao > 2 then
  begin
                      Monta( ConsumidorFinalToStr( NFe.Ide.indFinal));
                      Monta( PresencaCompradorToStr( NFe.Ide.indPres ));
  end;
  (*B26 *)            Monta( procEmiToStr(NFe.Ide.procEmi));
  (*B27 *)            Monta( NFe.Ide.verProc  );
  (*B28 *)MontaDataHora( NFe.Ide.dhCont, nfe.ide.cUF);
  (*B29*)             Monta( NFe.Ide.xJust);
  finalize;
  CheckEquals( Registro ,RetornaConteudo( sComparar));
end;

procedure TAcBrLerTxtTDD.IdI;
Var
  IBase , x : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('I');
    (*I02*)   Monta( NFe.Det[x].Prod.cProd     );
    (*I03*)   Monta( NFe.Det[x].Prod.cEAN      );
    (*I04*)   Monta( NFe.Det[x].Prod.xProd     );
    (*I05*)   Monta( NFe.Det[x].Prod.NCM       );
    (*I06*)   Monta( NFe.Det[x].Prod.EXTIPI    );
    (*I08*)   Monta( NFe.Det[x].Prod.CFOP      );
    (*I09*)   Monta( NFe.Det[x].Prod.uCom      );
    (*I10*)MontaDec( NFe.Det[x].Prod.qCom   , Config.DecqCom);
   (*I10a*)MontaDec( NFe.Det[x].Prod.vUnCom , Config.DecvUnCom);
    (*I11*)MontaDec( NFe.Det[x].Prod.vProd  , Config.DecvProd);
    (*I12*)   Monta( NFe.Det[x].Prod.cEANTrib  );
    (*I13*)   Monta( NFe.Det[x].Prod.uTrib     );
    (*I14*)MontaDec( NFe.Det[x].Prod.qTrib  , config.DecqTrib);
   (*I14a*)MontaDec( NFe.Det[x].Prod.vUnTrib, Config.DecvUnTrib );
    (*I15*)MontaDec( NFe.Det[x].Prod.vFrete , Config.DecvFrete);
    (*I16*)MontaDec( NFe.Det[x].Prod.vSeg   , Config.DecvSeg);
    (*I17*)MontaDec( NFe.Det[x].Prod.vDesc  , Config.DecvDesc);
   (*I17a*)MontaDec( NFe.Det[x].Prod.vOutro , Config.DecvOutro);
   (*I17b*)   Monta( indTotToStr( NFe.Det[x].Prod.IndTot) );
   (*I28a*)   Monta( NFe.Det[x].Prod.xPed     );
   (*I28b*)   Monta( NFe.Det[x].Prod.nItemPed );
   (*128p*)   Monta( NFe.Det[x].Prod.nFCI );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdI05c;
Var
  IBase , x : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('I05c');
    (*I05c*)Monta( NFe.Det[x].Prod.CEST );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdO08;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('O08');
    (*O09*)Monta( CSTIPIToStr(NFe.Det[x].Imposto.IPI.CST ));
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdT;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('T');
    (*T06*)Monta( NFe.Det[x].Imposto.COFINSST.vCOFINS , tcDe2 );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdT02;
Var
  IBase , x : Integer;
begin
  for x := 0 to  NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x  );
    Initialize('T02');
    (*T02*)Monta( NFe.Det[x].Imposto.COFINSST.vBC , tcDe2 );
    (*T03*)Monta( NFe.Det[x].Imposto.COFINSST.pCOFINS , tcDe2);
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;


procedure TAcBrLerTxtTDD.IdI18;
Var
  IBase , x , fJ : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    for fJ := 0 to NFe.Det[x].Prod.DI.Count - 1 do
    begin
      Initialize('I18');
      (*I19*)Monta( NFe.Det[x].Prod.DI[fJ].nDI );
      (*I20*)Monta( NFe.Det[x].Prod.DI[fJ].dDI,tcDat);
      (*I21*)Monta( NFe.Det[x].Prod.DI[fJ].xLocDesemb );
      (*I22*)Monta( NFe.Det[x].Prod.DI[fJ].UFDesemb );
      (*I23*)Monta( NFe.Det[x].Prod.DI[fJ].dDesemb,tcDat);
           Monta( TipoViaTranspToStr( NFe.Det[x].Prod.DI[fJ].tpViaTransp ));
      if (NFe.infNFe.Versao >= 3.10) then
      begin
        Monta( NFe.Det[x].Prod.DI[fJ].vAFRMM  , tcDe2);
        Monta( TipoIntermedioToStr( NFe.Det[x].Prod.DI[fJ].tpIntermedio));
        Monta( NFe.Det[x].Prod.DI[fJ].CNPJ  );
        Monta( NFe.Det[x].Prod.DI[fJ].UFTerceiro   );
      end;
      (*I24*)Monta( NFe.Det[x].Prod.DI[fJ].cExportador );
      finalize;
      CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
    end;
  end;
end;


procedure TAcBrLerTxtTDD.IdI25;
Var
  IBase,FJ,Fk, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := 0;
  fListaConteudo:= MontaLista( '§I25' );
  try
    if fListaConteudo.Count > 0  then
    begin
      for x := 0 to NFe.Det.Count - 1 do
      begin
        if ListaComparar( fListaConteudo[x] , '§I25') then
        begin
          IBase := MontaISaberString( '§I25' , IBase );
          if ( IBase > 0 ) then
          begin
            for FJ := 0 to NFe.Det[x].Prod.DI.Count - 1 do
            begin
              for fk := 0 to NFe.Det[x].Prod.DI[FJ].adi.Count - 1 do
              begin
                Initialize('I25');
                (*I26*)Monta( NFe.Det[x].Prod.DI[fj].adi[fk].nAdicao     , tcInt);
                (*I27*)Monta( NFe.Det[x].Prod.DI[fj].adi[fk].nSeqAdi     , tcInt);
                (*I28*)Monta( NFe.Det[x].Prod.DI[fj].adi[fk].cFabricante );
                           if NFe.Det[x].Prod.DI[fj].adi[fk].vDescDI > 0 then
                (*I29*)Monta( NFe.Det[x].Prod.DI[fj].adi[fk].vDescDI     , tcDe2)
                         else
                       Monta( '');
                       Monta( NFe.Det[x].Prod.DI[fj].adi[fk].nDraw       );
                finalize;
                CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
                Inc( IBase );
              end;
            end;
          end;
        end;
      end;
    end;
    if IBase = 0 then
    begin
      Initialize('I25');
      (*I26*)Monta( 0, tcInt);
      (*I27*)Monta( 0, tcInt);
      (*I28*)Monta( '' );
      (*I29*)Monta( 0, tcDe2);
             Monta( '' );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;


procedure TAcBrLerTxtTDD.IdLB;
Var
  IBase , x: Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    Initialize('LB');
    Monta( NFe.Det[x].Prod.nRECOPI );
    finalize;
    CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
  end;
end;

procedure TAcBrLerTxtTDD.IdI50;
Var
  IBase ,  x, fj : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    for fj := 0 to NFe.Det[x].Prod.detExport.Count - 1 do
    begin
      Initialize('I50');
      (*I50*)Monta( NFe.Det[x].Prod.detExport[fj].nDraw );
      finalize;
      CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
    end;
  end;
end;

procedure TAcBrLerTxtTDD.IdI52;
Var
  IBase , x, fJ : Integer;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
    IBase := MontaISaber('H', x );
    for fJ := 0 to NFe.Det[x].Prod.detExport.Count - 1 do
    begin
      Initialize('I52');
      (*I53*)Monta( NFe.Det[x].Prod.detExport[fj].nRE     );
      (*I54*)Monta( NFe.Det[x].Prod.detExport[fj].chNFe   );
      (*I55*)Monta( NFe.Det[x].Prod.detExport[fj].qExport , tcDe4 );
      finalize;
      CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
    end;
  end;
end;

Function TAcBrLerTxtTDD.RetornaConteudo( s  : String;sBase : String = ''; iDD : Integer = 0  ) : String;
Var
  iFor, j: Integer;
  AValues : String;
  sText   : String;
begin
  Result := '';
  if sBase <> '' then
  begin
    for iFor := 0 to FConteudoArquivo.count - 1 do
    begin
      AValues := FConteudoArquivo[iFor];
      sText := '';
      for J := Low(AValues) to High(AValues) do
      begin
        sText := sText+ AValues[j];
        if AnsiSameStr(sBase, sText ) then
        begin
          Result := FConteudoArquivo[iFor+iDD];
          Break;
        end;
      end;
    end;
  end
  else
  begin
    for iFor := 0 to FConteudoArquivo.count - 1 do
    begin
      AValues := FConteudoArquivo[iFor];
      sText := '';
      for J := Low(AValues) to High(AValues) do
      begin
        sText := sText+ AValues[j];
        if AnsiSameStr(s, sText ) then
        begin
          Result := FConteudoArquivo[iFor];
          Break;
        end;
      end;
    end;
  end;
end;

function TAcBrLerTxtTDD.LerCampo(const Tipo: TpcnTipoCampo; TAG: variant): variant;
var
  ConteudoTag: variant;
begin
  ConteudoTag := TAG;
  try
    case Tipo of
      tcStr     : result := ReverterFiltroTextoXML(ConteudoTag);
      tcDat     : result := FormatDateTime('yyyy-mm-dd', ConteudoTag );
      tcDatHor  : begin
                    if length(ConteudoTag)>0 then
                      result := EncodeDate(StrToInt(copy(ConteudoTag, 01, 4)), StrToInt(copy(ConteudoTag, 06, 2)), StrToInt(copy(ConteudoTag, 09, 2))) +
                        EncodeTime(StrToInt(copy(ConteudoTag, 12, 2)), StrToInt(copy(ConteudoTag, 15, 2)), StrToInt(copy(ConteudoTag, 18, 2)), 0)
                    else
                      result:='0';
                  end;
      tcHor     : result := TimeToStr( ConteudoTag );
      tcDe2     : result := FloatToString( TAG, '.', FloatMask( 2));
      tcDe3     : result := FloatToString( TAG, '.', FloatMask( 3));
      tcDe4     : result := FloatToString( TAG, '.', FloatMask( 4));
      tcDe10    : result := FloatToString( TAG, '.', FloatMask(10));
      tcEsp     : result := ConteudoTag;
      tcInt     : result := intToStr(ConteudoTag);
      else
       raise Exception.Create('Tag <' + Tag + '> com conteúdo inválido. '+ConteudoTag);
    end;
  except
    raise Exception.Create('Erro ao ler o campo ' + Tag + '. Conteúdo inválido = ' +ConteudoTag);
  end;
end;

Function TAcBrLerTxtTDD.MontaISaber( sMonta : STring;pfiItem : Integer): Integer;
begin
  Initialize(sMonta);
  Monta( NFe.Det[pfiItem].prod.nItem , tcInt );
  sComparar := Registro;
  finalize;
  Result := iPosicao( sComparar );
end;

Function TAcBrLerTxtTDD.MontaISaberString( sMonta : STring;iPosi : Integer ): Integer;
begin
  Monta(sMonta);
  sComparar := Registro;
  Result := iPosicao( sComparar , iPosi );
end;

Function TAcBrLerTxtTDD.iPosicao( s : String;iPosi : Integer = 0  ): Integer;
Var
  iFor, j : Integer;
  AValues : String;
  sText   : String;
begin
  Result := 0;
  for iFor := iPosi to FConteudoArquivo.count - 1 do
  begin
    AValues := FConteudoArquivo[iFor];
    sText := '';
    for J := Low(AValues) to High(AValues) do
    begin
      sText := sText+ AValues[j];
      if AnsiSameStr(s, sText ) then
      begin
        Result := iFor;
        Exit;
      end;
    end;
  end;
end;

Function TAcBrLerTxtTDD.RetornaConteudoPos( s  : String;iDD : Integer = 0  ) : String;
Var
  iFor, j: Integer;
  AValues ,  sText : String;
begin
  Result := '';
  for iFor := iDD to FConteudoArquivo.count - 1 do
    begin
      AValues := FConteudoArquivo[iFor];
      sText := '';
      for J := Low(AValues) to High(AValues) do
      begin
        sText := sText+ AValues[j];
        if AnsiSameStr( s , sText ) then
        begin
          Result := FConteudoArquivo[iFor];
          exit;
        end;
      end;
    end;
end;

procedure TAcBrLerTxtTDD.Monta( TAG: variant; const Tipo: TpcnTipoCampo = tcStr );
begin
  Registro := Registro+LerCampo(Tipo, TAG)+'|';
end;

procedure TAcBrLerTxtTDD.MontaHora(TAG: Variant );
begin
  if Tag <> StrToTime ('00:00:00' )  then
    Registro := Registro+ TimeToStr( TAG );

  Registro := Registro+'|';
end;

procedure TAcBrLerTxtTDD.MontaZeroEsquerda(TAG: Integer; iZeros: Integer);
begin
  if iZeros > 0 then
      Registro := Registro+ Poem_Zeros( TAG, iZeros)
  else
    if iZeros = 0 then
      Registro := Registro+' '
    else
      Registro := Registro+'';


  Registro := Registro+'|';
end;

procedure TAcBrLerTxtTDD.MontaDec(TAG: double; dDecimal: Integer);
begin
  if dDecimal >= 0 then
    Registro := Registro+ FloatToString( TAG, '.', FloatMask(dDecimal));
  Registro := Registro+'|';
end;

Procedure TAcBrLerTxtTDD.Initialize( sMonta : STring );
begin
  Registro  := '§'+sMonta+'|';
  sComparar := Registro;
end;

procedure TAcBrLerTxtTDD.Finalize( sFinalize : String = '') ;
begin
  Registro := Registro+sFinalize;
end;



procedure TAcBrLerTxtTDD.IdBA02;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§BA' );
  try
    for x := 0 to NFe.ide.NFref.Count - 1 do
    begin
      if ListaComparar( fListaConteudo[x] ,  '§BA02') then
      begin
        Inc( IBase );
        IBase := MontaISaberString( '§BA02' , IBase );
        if ( IBase > 0 ) then
        begin
          Initialize('BA02');
          (*B13*)Monta( NFe.ide.NFref[x].refNFe );
          finalize;
         CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('BA02');
  (*B13*)Monta('' );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdBA03;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§BA' );
  try
    for x := 0 to NFe.ide.NFref.Count - 1 do
    begin
      if ListaComparar( fListaConteudo[x] ,  '§BA03') then
      begin
        Inc( IBase );
        IBase := MontaISaberString('§BA03', IBase );
        if ( IBase > 0 ) then
        begin
          Initialize('BA03');
          (*B15*)Monta( NFe.ide.NFref[x].RefNF.cUF   , tcInt);
          (*B16*)Monta( NFe.ide.NFref[x].RefNF.AAMM  );
          (*B17*)Monta( NFe.ide.NFref[x].RefNF.CNPJ  );
          (*B18*)MontaZeroEsquerda(NFe.ide.NFref[x].RefNF.Modelo, 2);
          (*B19*)Monta( NFe.ide.NFref[x].RefNF.serie , tcInt);
          (*B20*)Monta( NFe.ide.NFref[x].RefNF.nNF   , tcInt);
          finalize;
         CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('BA03');
      (*B15*)Monta( 0 , tcInt);
      (*B16*)Monta( '' );
      (*B17*)Monta( '' );
      (*B18*)Monta( 0 , tcInt);
      (*B19*)Monta( 0 , tcInt);
      (*B20*)Monta( 0 , tcInt);
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;


procedure TAcBrLerTxtTDD.IdBA10;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§BA' );
  try
    for x := 0 to NFe.ide.NFref.Count - 1 do
    begin
      if ListaComparar( fListaConteudo[x] , '§BA10') then
      begin
        Inc( IBase );
        IBase := MontaISaberString('§BA10', IBase );
        if ( IBase > 0 ) then
        begin
          Initialize('BA10');
          (*B20b*)Monta( NFe.ide.NFref[X].refNFP.cUF   , tcInt);
          (*B20c*)Monta( NFe.ide.NFref[X].refNFP.AAMM  );
          (*B20f*)Monta( NFe.ide.NFref[X].refNFP.IE    );
          (*B20f*)Monta( NFe.ide.NFref[X].refNFP.modelo);
          (*B20g*)Monta( NFe.ide.NFref[X].refNFP.serie , tcInt);
          (*B20h*)Monta( NFe.ide.NFref[X].refNFP.nNF   , tcInt);
          if (NFe.infNFe.Versao >= 3.10) then
            Monta( NFe.ide.NFref[X].refCTe);
          finalize;
         CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('BA10');
      (*B20b*)Monta( 0 , tcInt);
      (*B20c*)Monta( ''  );
      (*B20f*)Monta( ''  );
      (*B20f*)Monta( ''  );
      (*B20g*)Monta( 0 , tcInt);
      (*B20h*)Monta( 0 , tcInt);
              Monta( ''  );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;


procedure TAcBrLerTxtTDD.IdBA13;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§BA' );
  try
    for x := 0 to NFe.ide.NFref.Count - 1 do
    begin
      if ListaComparar( fListaConteudo[x] ,  '§BA13') then
      begin
        Inc( IBase );
        IBase := MontaISaberString('§BA13', IBase );
        if ( IBase > 0 ) then
        begin
          Initialize('BA13');
          (*B20d*)Monta( NFe.ide.NFref[x].refNFP.CNPJCPF);
          finalize;
         CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('BA13');
      (*B20d*)Monta( '' );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdBA14;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§BA' );
  try
    for x := 0 to NFe.ide.NFref.Count - 1 do
    begin
      if ListaComparar( fListaConteudo[x] ,  '§BA14') then
      begin
        Inc( IBase );
        IBase := MontaISaberString('§BA14', IBase );
        if ( IBase > 0 ) then
        begin
          Initialize('BA14');
          (*B20d*)Monta( NFe.ide.NFref[x].refNFP.CNPJCPF);
          finalize;
         CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('BA14');
      (*B20d*)Monta( '');
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdBA19;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§BA' );
  try
    for x := 0 to NFe.ide.NFref.Count - 1 do
    begin
      if ListaComparar( fListaConteudo[x] ,  '§BA19') then
      begin
        Inc( IBase );
        IBase := MontaISaberString('§BA19', IBase );
        if ( IBase > 0 ) then
        begin
          Initialize('BA19');
          (*B20d*)Monta( NFe.ide.NFref[x].refCTe);
          finalize;
         CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('BA19');
      (*B20d*)Monta( '');
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdBA20;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§BA' );
  try
    for x := 0 to NFe.ide.NFref.Count - 1 do
    begin
      if ListaComparar( fListaConteudo[x] ,  '§BA20') then
      begin
        Inc( IBase );
        IBase := MontaISaberString('§BA20', IBase );
        if ( IBase > 0 ) then
        begin
          Initialize('BA20');
          (*B20k*)Monta( ECFModRefToStr( NFe.ide.NFref[x].RefECF.modelo));
          (*B20i*)Monta( NFe.ide.NFref[x].RefECF.nECF  );
          (*B20m*)Monta( NFe.ide.NFref[x].RefECF.nCOO  );
          finalize;
         CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('BA20');
      (*B20k*)Monta( 0  );
      (*B20i*)Monta( '' );
      (*B20m*)Monta( '' );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdI05a;
Var
  IBase , x, fJ : Integer;
  sRegistro : STring;
begin
  for x := 0 to NFe.Det.Count - 1 do
  begin
    IBase := -1;
    for fJ := 0 to NFe.Det[x].Prod.NVE.Count - 1 do
    begin
     Inc( IBase );
     Initialize('I05a');
     (*I05c*)Monta( NFe.Det[x].Prod.NVE[fj].NVE );
     finalize;
     sRegistro := Registro;
     IBase := MontaISaberString(sComparar, IBase );
     CheckEquals( sRegistro ,RetornaConteudoPos( sRegistro,IBase));
    end;
  end;
end;


procedure TAcBrLerTxtTDD.IdGA02;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§GA0' );
  try
    for x := 0 to NFe.autXML.Count - 1 do
    begin
      if ListaComparar( fListaConteudo[x] , '§GA02') then
      begin
        Inc( IBase );
        IBase := MontaISaberString('§GA02', IBase );
        if ( IBase > 0 ) then
        begin
          Initialize('GA02');
          Monta( NFe.autXML[x].CNPJCPF  );
          Finalize;
         CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('GA02');
      Monta( '' );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdGA03;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§GA0' );
  try
    for x := 0 to NFe.autXML.Count - 1 do
    begin
      if ListaComparar( fListaConteudo[x] , '§GA03') then
      begin
        Inc( IBase );
        IBase := MontaISaberString('§GA03', IBase );
        if ( IBase > 0 ) then
        begin
          Initialize('GA03');
          Monta( NFe.autXML[x].CNPJCPF  );
          Finalize;
         CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
        end;
      end;
    end;
    if IBase = -1 then
    begin
       Initialize('GA03');
      Monta( '' );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdYA;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§YA' );
  try
    for x := 0 to NFe.pag.Count - 1 do
    begin
      if ListaComparar( fListaConteudo[x] , '§YA') then
      begin
        Inc( IBase );
        IBase := MontaISaberString( '§YA' , IBase );
        if ( IBase >= 0 ) then
        begin
          Initialize('YA');
          Monta( FormaPagamentoToStr( NFe.pag[x].tPag ));
          Monta( NFe.pag[x].vPag  , tcDe2);
          Monta( NFe.pag[x].CNPJ  , tcStr);
          Monta( BandeiraCartaoToStr( NFe.pag[x].tBand ));
          Monta( NFe.pag[x].cAut  , tcStr);
          finalize;
          CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('YA');
      Monta( '');
      Monta( '');
      Monta( '');
      Monta( '');
      Monta( '');
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.IdYA04a;
Var
  IBase, x : Integer;
  FListaConteudo : TStringList;
begin
  IBase := -1;
  fListaConteudo:= MontaLista( '§YA' );
  try
    for x := 0 to NFe.pag.Count - 1 do
    begin
      if ListaComparar( fListaConteudo[x] , '§YA') then
      begin
        Inc( IBase );
        IBase := MontaISaberString( '§YA04a' , IBase );
        if ( IBase >= 0 ) then
        begin
          Initialize('YA04a');
          (*YA04a*)Monta( tpIntegraToStr( NFe.pag[x].tpIntegra));
          finalize;
         CheckEquals( Registro ,RetornaConteudoPos( sComparar,IBase));
        end;
      end;
    end;
    if IBase = -1 then
    begin
      Initialize('YA04a');
  (*YA04a*)Monta('' );
      finalize;
      CheckEquals( Registro ,RetornaConteudo( sComparar));
    end;
  finally
    fListaConteudo.Free;
  end;
end;

procedure TAcBrLerTxtTDD.ChecarItensLayoutVersao310;
Var
  FLayoutArquivoTXT : TStringList;
begin
  FLayoutArquivoTXT := TStringList.create;
  try
    FLayoutArquivoTXT.Text := CarregarLayoutTXT('3.10');

    CheckEquals( FLayoutArquivoTXT.Count, 120 );
  finally
    FLayoutArquivoTXT.Free;
  end;
end;

procedure TAcBrLerTxtTDD.ChecarLayoutVersao310;
Var
  FLayoutArquivoTXT : TStringList;
begin
  FLayoutArquivoTXT := TStringList.create;
  try
    FLayoutArquivoTXT.Text  :=  CarregarLayoutTXT('3.10');

    CheckEquals( UpperCase('<B>       NOTA FISCAL|1'),FLayoutArquivoTXT[0]);
    CheckEquals( UpperCase('<B01>     A|3.10|^id^'),FLayoutArquivoTXT[1]);
    CheckEquals( UpperCase('<B01>     B|cUF¨|cNF¨|NatOp¨|indPag¨|mod¨|serie¨|nNF¨|dhEmi¨|dhSaiEnt¨|tpNF¨|idDest¨|cMunFG¨|tpImp¨|tpEmis¨|CDV¨|tpAmb¨|finNFe¨|indFinal¨|indPres¨|procEmi¨|verProc¨|dhCont¨|xJust¨'),FLayoutArquivoTXT[2]);
    CheckEquals( UpperCase('<BA>   BA02|refNFe¨'),FLayoutArquivoTXT[3]);
    CheckEquals( UpperCase('<BA03> BA03|cUF¨|AAMM¨|CNPJ¨|Mod¨|serie¨|nNF¨'),FLayoutArquivoTXT[4]);
    CheckEquals( UpperCase('<BA10> BA10|cUF¨|AAMM¨|IE¨|Mod¨|serie¨|nNF¨'),FLayoutArquivoTXT[5]);
    CheckEquals( UpperCase('<BA13> BA13|CNPJ¨'),FLayoutArquivoTXT[6]);
    CheckEquals( UpperCase('<BA14> BA14|CPF¨'),FLayoutArquivoTXT[7]);
    CheckEquals( UpperCase('<BA19> BA19|refCTe¨'),FLayoutArquivoTXT[8]);
    CheckEquals( UpperCase('<BA20> BA20|mod¨|nECF¨|nCOO¨'),FLayoutArquivoTXT[9]);
    CheckEquals( UpperCase('<C01>     C|XNome¨|XFant¨|IE¨|IEST¨|IM¨|CNAE¨|CRT¨'),FLayoutArquivoTXT[10]);
    CheckEquals( UpperCase('<C01>   C02|CNPJ¨'),FLayoutArquivoTXT[11]);
    CheckEquals( UpperCase('<C01>  C02a|CPF¨'),FLayoutArquivoTXT[12]);
    CheckEquals( UpperCase('<C05>   C05|XLgr¨|Nro¨|xCpl¨|xBairro¨|CMun¨|XMun¨|UF¨|CEP¨|CPais¨|XPais¨|Fone¨'),FLayoutArquivoTXT[13]);
    CheckEquals( UpperCase('<D01>     D|CNPJ¨|XOrgao¨|Matr¨|XAgente¨|Fone¨|UF¨|NDAR¨|DEmi¨|VDAR¨|RepEmi¨|DPag¨'),FLayoutArquivoTXT[14]);
    CheckEquals( UpperCase('<E01>     E|XNome¨|indIEDest¨|IE¨|ISUF¨|IM¨|EMAIL¨'),FLayoutArquivoTXT[15]);
    CheckEquals( UpperCase('<E01>   E02|CNPJ¨'),FLayoutArquivoTXT[16]);
    CheckEquals( UpperCase('<E01>   E03|CPF¨'),FLayoutArquivoTXT[17]);
    CheckEquals( UpperCase('<E01>  E03a|idEstrangeiro¨'),FLayoutArquivoTXT[18]);
    CheckEquals( UpperCase('<E05>   E05|XLgr¨|Nro¨|XCpl¨|XBairro¨|CMun¨|XMun¨|UF¨|CEP¨|CPais¨|XPais¨|Fone¨'),FLayoutArquivoTXT[19]);
    CheckEquals( UpperCase('<F01>     F|XLgr¨|Nro¨|XCpl¨|XBairro¨|CMun¨|XMun¨|UF¨'),FLayoutArquivoTXT[20]);
    CheckEquals( UpperCase('<F01>   F02|CNPJ¨'),FLayoutArquivoTXT[21]);
    CheckEquals( UpperCase('<F01>  F02a|CPF¨'),FLayoutArquivoTXT[22]);
    CheckEquals( UpperCase('<G01>     G|XLgr¨|Nro¨|XCpl¨|XBairro¨|CMun¨|XMun¨|UF¨'),FLayoutArquivoTXT[23]);
    CheckEquals( UpperCase('<G01>   G02|CNPJ¨'),FLayoutArquivoTXT[24]);
    CheckEquals( UpperCase('<G01>  G02a|CPF¨'),FLayoutArquivoTXT[25]);
    CheckEquals( UpperCase('<G01>  GA02|CNPJ¨'),FLayoutArquivoTXT[26]);
    CheckEquals( UpperCase('<G01>  GA03|CPF¨'),FLayoutArquivoTXT[27]);
    CheckEquals( UpperCase('<H01>     H|NItem¨|InfAdProd¨'),FLayoutArquivoTXT[28]);
    CheckEquals( UpperCase('<I01>     I|CProd¨|CEAN¨|XProd¨|NCM¨|EXTIPI¨|CFOP¨|UCom¨|QCom¨|VUnCom¨|VProd¨|CEANTrib¨|UTrib¨|QTrib¨|VUnTrib¨|VFrete¨|VSeg¨|VDesc¨|VOutro¨|indTot¨|xPed¨|nItemPed¨|nFCI¨'),FLayoutArquivoTXT[29]);
    CheckEquals( UpperCase('<I05A> I05a|NVE¨'),FLayoutArquivoTXT[30]);
    CheckEquals( UpperCase('<I05c> I05c|CEST¨'),FLayoutArquivoTXT[31]);
    CheckEquals( UpperCase('<I18>   I18|NDI¨|DDI¨|XLocDesemb¨|UFDesemb¨|DDesemb¨|tpViaTransp¨|vAFRMM¨|tpIntermedio¨|CNPJ¨|UFTerceiro¨|CExportador¨'),FLayoutArquivoTXT[32]);
    CheckEquals( UpperCase('<I25>   I25|NAdicao¨|NSeqAdic¨|CFabricante¨|VDescDI¨|nDraw¨'),FLayoutArquivoTXT[33]);
    CheckEquals( UpperCase('<I50>   I50|nDraw¨'),FLayoutArquivoTXT[34]);
    CheckEquals( UpperCase('<I52>   I52|nRE¨|chNFe¨|qExport¨'),FLayoutArquivoTXT[35]);
    CheckEquals( UpperCase('<J01>    JA|tpOp¨|chassi¨|cCor¨|xCor¨|pot¨|Cilin¨|pesoL¨|pesoB¨|NSerie¨|TpComb¨|NMotor¨|CMT¨|Dist¨|AnoMod¨|AnoFab¨|TpPint¨|TpVeic¨|EspVeic¨|VIN¨|CondVeic¨|CMod¨|cCorDENATRAN¨|lota¨|tpRest¨'),FLayoutArquivoTXT[36]);
    CheckEquals( UpperCase('<K01>     K|NLote¨|QLote¨|DFab¨|DVal¨|VPMC¨'),FLayoutArquivoTXT[37]);
    CheckEquals( UpperCase('<L01>     L|TpArma¨|NSerie¨|NCano¨|Descr¨'),FLayoutArquivoTXT[38]);
    CheckEquals( UpperCase('<LA>     LA|CProdANP¨|PpMixGN¨|CODIF¨|QTemp¨|UFCons¨'),FLayoutArquivoTXT[39]);
    CheckEquals( UpperCase('<LA07> LA07|QBCProd¨|VAliqProd¨|VCIDE¨'),FLayoutArquivoTXT[40]);
    CheckEquals( UpperCase('<LB>     LB|nRECOPI¨'),FLayoutArquivoTXT[41]);
    CheckEquals( UpperCase('<M01>     M|VTotTrib¨'),FLayoutArquivoTXT[42]);
    CheckEquals( UpperCase('<N01>     N|'),FLayoutArquivoTXT[43]);
    CheckEquals( UpperCase('<N02>   N02|Orig¨|CST¨|ModBC¨|VBC¨|PICMS¨|VICMS¨'),FLayoutArquivoTXT[44]);
    CheckEquals( UpperCase('<N03>   N03|Orig¨|CST¨|ModBC¨|VBC¨|PICMS¨|VICMS¨|ModBCST¨|PMVAST¨|PRedBCST¨|VBCST¨|PICMSST¨|VICMSST¨'),FLayoutArquivoTXT[45]);
    CheckEquals( UpperCase('<N04>   N04|Orig¨|CST¨|ModBC¨|PRedBC¨|VBC¨|PICMS¨|VICMS¨|VICMSDeson¨|MotDesICMS¨'),FLayoutArquivoTXT[46]);
    CheckEquals( UpperCase('<N05>   N05|Orig¨|CST¨|ModBCST¨|PMVAST¨|PRedBCST¨|VBCST¨|PICMSST¨|VICMSST¨|VICMSDeson¨|MotDesICMS¨'),FLayoutArquivoTXT[47]);
    CheckEquals( UpperCase('<N06>   N06|Orig¨|CST¨|vICMSDeson¨|MotDesICMS¨'),FLayoutArquivoTXT[48]);
    CheckEquals( UpperCase('<N07>   N07|Orig¨|CST¨|ModBC¨|PRedBC¨|VBC¨|PICMS¨|VICMSOp¨|PDif¨|VICMSDif¨|VICMS¨'),FLayoutArquivoTXT[49]);
    CheckEquals( UpperCase('<N08>   N08|Orig¨|CST¨|VBCSTRet¨|VICMSSTRet¨'),FLayoutArquivoTXT[50]);
    CheckEquals( UpperCase('<N09>   N09|Orig¨|CST¨|ModBC¨|PRedBC¨|VBC¨|PICMS¨|VICMS¨|ModBCST¨|PMVAST¨|PRedBCST¨|VBCST¨|PICMSST¨|VICMSST¨|VICMSDeson¨|MotDesICMS¨'),FLayoutArquivoTXT[51]);
    CheckEquals( UpperCase('<N10>   N10|Orig¨|CST¨|ModBC¨|VBC¨|PRedBC¨|PICMS¨|VICMS¨|ModBCST¨|PMVAST¨|PRedBCST¨|VBCST¨|PICMSST¨|VICMSST¨|VICMSDeson¨|MotDesICMS¨'),FLayoutArquivoTXT[52]);
    CheckEquals( UpperCase('<N10a> N10a|Orig¨|CST¨|ModBC¨|VBC¨|PRedBC¨|PICMS¨|VICMS¨|ModBCST¨|PMVAST¨|PRedBCST¨|VBCST¨|PICMSST¨|VICMSST¨|pBCOp¨|UFST¨'),FLayoutArquivoTXT[53]);
    CheckEquals( UpperCase('<N10b> N10b|Orig¨|CST¨|vBCSTRet¨|vICMSSTRet¨|vBCSTDest¨|vICMSSTDest¨'),FLayoutArquivoTXT[54]);
    CheckEquals( UpperCase('<N10c> N10c|Orig¨|CSOSN¨|pCredSN¨|vCredICMSSN¨'),FLayoutArquivoTXT[55]);
    CheckEquals( UpperCase('<N10d> N10d|Orig¨|CSOSN¨'),FLayoutArquivoTXT[56]);
    CheckEquals( UpperCase('<N10e> N10e|Orig¨|CSOSN¨|modBCST¨|pMVAST¨|pRedBCST¨|vBCST¨|pICMSST¨|vICMSST¨|pCredSN¨|vCredICMSSN¨'),FLayoutArquivoTXT[57]);
    CheckEquals( UpperCase('<N10f> N10f|Orig¨|CSOSN¨|modBCST¨|pMVAST¨|pRedBCST¨|vBCST¨|pICMSST¨|vICMSST¨'),FLayoutArquivoTXT[58]);
    CheckEquals( UpperCase('<N10g> N10g|Orig¨|CSOSN¨|vBCSTRet¨|vICMSSTRet¨'),FLayoutArquivoTXT[59]);
    CheckEquals( UpperCase('<N10h> N10h|Orig¨|CSOSN¨|modBC¨|vBC¨|pRedBC¨|pICMS¨|vICMS¨|modBCST¨|pMVAST¨|pRedBCST¨|vBCST¨|pICMSST¨|vICMSST¨|pCredSN¨|vCredICMSSN¨'),FLayoutArquivoTXT[60]);
    CheckEquals( UpperCase('<NA>     NA|vBCUFDest¨|pFCPUFDest¨|pICMSUFDest¨|pICMSInter¨|pICMSInterPart¨|vFCPUFDest¨|vICMSUFDest¨|vICMSUFRemet¨'),FLayoutArquivoTXT[61]);
    CheckEquals( UpperCase('<O01>     O|ClEnq¨|CNPJProd¨|CSelo¨|QSelo¨|CEnq¨'),FLayoutArquivoTXT[62]);
    CheckEquals( UpperCase('<O07>   O07|CST¨|VIPI¨'),FLayoutArquivoTXT[63]);
    CheckEquals( UpperCase('<O07>   O10|VBC¨|PIPI¨|VIPI¨'),FLayoutArquivoTXT[64]);
    CheckEquals( UpperCase('<O07>   O11|QUnid¨|VUnid¨|VIPI¨'),FLayoutArquivoTXT[65]);
    CheckEquals( UpperCase('<O08>   O08|CST¨'),FLayoutArquivoTXT[66]);
    CheckEquals( UpperCase('<P01>     P|VBC¨|VDespAdu¨|VII¨|VIOF¨'),FLayoutArquivoTXT[67]);
    CheckEquals( UpperCase('<Q01>     Q|'),FLayoutArquivoTXT[68]);
    CheckEquals( UpperCase('<Q02>   Q02|CST¨|VBC¨|PPIS¨|VPIS¨'),FLayoutArquivoTXT[69]);
    CheckEquals( UpperCase('<Q03>   Q03|CST¨|QBCProd¨|VAliqProd¨|VPIS¨'),FLayoutArquivoTXT[70]);
    CheckEquals( UpperCase('<Q04>   Q04|CST¨'),FLayoutArquivoTXT[71]);
    CheckEquals( UpperCase('<Q05>   Q05|CST¨|VPIS¨'),FLayoutArquivoTXT[72]);
    CheckEquals( UpperCase('<Q05>   Q07|VBC¨|PPIS¨|VPIS¨'),FLayoutArquivoTXT[73]);
    CheckEquals( UpperCase('<Q05>   Q10|QBCProd¨|VAliqProd¨'),FLayoutArquivoTXT[74]);
    CheckEquals( UpperCase('<R01>     R|VPIS¨'),FLayoutArquivoTXT[75]);
    CheckEquals( UpperCase('<R01>   R02|VBC¨|PPIS¨'),FLayoutArquivoTXT[76]);
    CheckEquals( UpperCase('<R01>   R04|QBCProd¨|VAliqProd¨'),FLayoutArquivoTXT[77]);
    CheckEquals( UpperCase('<S01>     S|'),FLayoutArquivoTXT[78]);
    CheckEquals( UpperCase('<S02>   S02|CST¨|VBC¨|PCOFINS¨|VCOFINS¨'),FLayoutArquivoTXT[79]);
    CheckEquals( UpperCase('<S03>   S03|CST¨|QBCProd¨|VAliqProd¨|VCOFINS¨'),FLayoutArquivoTXT[80]);
    CheckEquals( UpperCase('<S04>   S04|CST¨'),FLayoutArquivoTXT[81]);
    CheckEquals( UpperCase('<S05>   S05|CST¨|VCOFINS¨'),FLayoutArquivoTXT[82]);
    CheckEquals( UpperCase('<S05>   S07|VBC¨|PCOFINS¨'),FLayoutArquivoTXT[83]);
    CheckEquals( UpperCase('<S05>   S09|QBCProd¨|VAliqProd¨'),FLayoutArquivoTXT[84]);
    CheckEquals( UpperCase('<T01>     T|VCOFINS¨'),FLayoutArquivoTXT[85]);
    CheckEquals( UpperCase('<T01>   T02|VBC¨|PCOFINS¨'),FLayoutArquivoTXT[86]);
    CheckEquals( UpperCase('<T01>   T04|QBCProd¨|VAliqProd¨'),FLayoutArquivoTXT[87]);
    CheckEquals( UpperCase('<U01>     U|VBC¨|VAliq¨|VISSQN¨|CMunFG¨|CListServ¨|VDeducao¨|VOutro¨|VDescIncond¨|VDescCond¨|VISSRet¨|IndISS¨|CServico¨|CMun¨|CPais¨|NProcesso¨|IndIncentivo¨'),FLayoutArquivoTXT[88]); //ok
    CheckEquals( UpperCase('<UA>     UA|PDevol¨|VIPIDevol¨'),FLayoutArquivoTXT[89]);
    CheckEquals( UpperCase('<W01>     W|'),FLayoutArquivoTXT[90]);
    CheckEquals( UpperCase('<W02>   W02|vBC¨|vICMS¨|vICMSDeson¨|vBCST¨|vST¨|vProd¨|vFrete¨|vSeg¨|vDesc¨|vII¨|vIPI¨|vPIS¨|vCOFINS¨|vOutro¨|vNF¨|vTotTrib¨'),FLayoutArquivoTXT[91]);
    CheckEquals( UpperCase('<W04c> W04c|vFCPUFDest¨'),FLayoutArquivoTXT[92]);
    CheckEquals( UpperCase('<W04e> W04e|vICMSUFDest¨'),FLayoutArquivoTXT[93]);
    CheckEquals( UpperCase('<W04g> W04g|vICMSUFRemet¨'),FLayoutArquivoTXT[94]);
    CheckEquals( UpperCase('<W17>   W17|VServ¨|VBC¨|VISS¨|VPIS¨|VCOFINS¨|dCompet¨|vDeducao¨|vOutro¨|vDescIncond¨|vDescCond¨|vISSRet¨|cRegTrib¨'),FLayoutArquivoTXT[95]);
    CheckEquals( UpperCase('<W23>   W23|VRetPIS¨|VRetCOFINS¨|VRetCSLL¨|VBCIRRF¨|VIRRF¨|VBCRetPrev¨|VRetPrev¨'),FLayoutArquivoTXT[96]);
    CheckEquals( UpperCase('<X01>     X|ModFrete¨'),FLayoutArquivoTXT[97]);
    CheckEquals( UpperCase('<X03>   X03|XNome¨|IE¨|XEnder¨|XMun¨|UF¨'),FLayoutArquivoTXT[98]);
    CheckEquals( UpperCase('<X03>   X04|CNPJ¨'),FLayoutArquivoTXT[99]);
    CheckEquals( UpperCase('<X03>   X05|CPF¨'),FLayoutArquivoTXT[100]);
    CheckEquals( UpperCase('<X11>   X11|VServ¨|VBCRet¨|PICMSRet¨|VICMSRet¨|CFOP¨|CMunFG¨'),FLayoutArquivoTXT[101]);
    CheckEquals( UpperCase('<X18>   X18|Placa¨|UF¨|RNTC¨'),FLayoutArquivoTXT[102]);
    CheckEquals( UpperCase('<X22>   X22|Placa¨|UF¨|RNTC¨|Vagao¨|Balsa¨'),FLayoutArquivoTXT[103]);
    CheckEquals( UpperCase('<X26>   X26|QVol¨|Esp¨|Marca¨|NVol¨|PesoL¨|PesoB¨'),FLayoutArquivoTXT[104]);
    CheckEquals( UpperCase('<X26>   X33|NLacre¨'),FLayoutArquivoTXT[105]);
    CheckEquals( UpperCase('<Y01>     Y|'),FLayoutArquivoTXT[106]);
    CheckEquals( UpperCase('<Y02>   Y02|NFat¨|VOrig¨|VDesc¨|VLiq¨'),FLayoutArquivoTXT[107]);
    CheckEquals( UpperCase('<Y07>   Y07|NDup¨|DVenc¨|VDup¨'),FLayoutArquivoTXT[108]);
    CheckEquals( UpperCase('<YA>     YA|TPag¨|VPag¨|CNPJ¨|TBand¨|CAut¨'),FLayoutArquivoTXT[109]);
    CheckEquals( UpperCase('<YA>  YA04a|tpIntegra¨'),FLayoutArquivoTXT[110]);
    CheckEquals( UpperCase('<Z01>     Z|InfAdFisco¨|InfCpl¨'),FLayoutArquivoTXT[111]);
    CheckEquals( UpperCase('<Z04>   Z04|XCampo¨|XTexto¨'),FLayoutArquivoTXT[112]);
    CheckEquals( UpperCase('<Z07>   Z07|XCampo¨|XTexto¨'),FLayoutArquivoTXT[113]);
    CheckEquals( UpperCase('<Z10>   Z10|NProc¨|IndProc¨'),FLayoutArquivoTXT[114]);
    CheckEquals( UpperCase('<ZA>     ZA|UFSaidaPais¨|XLocExporta¨|XLocDespacho¨'),FLayoutArquivoTXT[115]);
    CheckEquals( UpperCase('<ZB>     ZB|XNEmp¨|XPed¨|XCont¨'),FLayoutArquivoTXT[116]);
    CheckEquals( UpperCase('<ZC>     ZB|Safra¨|Ref¨|QTotMes¨|QTotAnt¨|QTotGer¨|VFor¨|VTotDed¨|VLiqFor¨'),FLayoutArquivoTXT[117]);
    CheckEquals( UpperCase('<ZC04> ZC04|Dia¨|Qtde¨'),FLayoutArquivoTXT[118]);
    CheckEquals( UpperCase('<ZC10> ZC10|XDed¨|VDed¨'),FLayoutArquivoTXT[119]);
  finally
    FLayoutArquivoTXT.Free;
  end;
end;


Function TAcBrLerTxtTDD.MontaLista( s : String ): TStringList;
Var
  iFor, j : Integer;
  AValues : String;
  sText   : String;
begin
  Result   := TStringList.create;
  for iFor := 0 to FConteudoArquivo.count - 1 do
  begin
    AValues := FConteudoArquivo[iFor];
    sText := '';
    for J := Low(AValues) to High(AValues) do
    begin
      sText := sText+ AValues[j];
      if AnsiSameStr(s, sText ) then
      begin
        Result.Add( FConteudoArquivo[iFor]);
        Break;
      end;
    end;
  end;
end;

Function TAcBrLerTxtTDD.ListaComparar( sLista , sListaCompara : String ) : Boolean;
Var
  j : Integer;
  sText, AValues : String;
begin
  Result  := False;
  AValues := sLista;
  sText   := '';
  for J := Low(AValues) to High(AValues) do
  begin
    sText := sText+ AValues[j];
    if AnsiSameStr(sListaCompara, sText ) then
    begin
      Result := True;
      Exit;
    end;
  end;
end;


initialization
  // Register any test cases with the test runner
  RegisterTest(TAcBrLerTxtTDD.Suite);
end.
